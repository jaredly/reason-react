[{"href": "./Creation.html", "title": "Creation", "contents": "You might have seen the render: (self) =&gt; ... part in make. The concept of JavaScript this doesn&#39;t exist in ReasonReact (but can exist in Reason, since it has an optional object system); the this equivalent is called self. It&#39;s a record that contains state, retainedProps, handle and reduce, which we pass around to the lifecycle events, render and a few others, when they need the bag of information. These concepts will be explained later on.", "rendered": "You might have seen the <code>render: (self) =&gt; ...</code> part in <code>make</code>. The concept of JavaScript <code>this</code> doesn&#39;t exist in ReasonReact (but can exist in Reason, since it has an optional object system); the <code>this</code> equivalent is called <code>self</code>. It&#39;s a record that contains <code>state</code>, <code>retainedProps</code>, <code>handle</code> and <code>reduce</code>, which we pass around to the lifecycle events, <code>render</code> and a few others, when they need the bag of information. These concepts will be explained later on.", "breadcrumb": "Creation"},
{"href": "./Creation.html#self", "title": "self", "contents": "", "rendered": "", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "It says &quot;I understand that age is optional and that when I use the label I should pass an int. But I&#39;d like to forward an option value explicitly&quot;. This isn&#39;t a JSX trick we&#39;ve made up; it&#39;s just a language feature! See the section on &quot;Explicitly Passed Optional&quot; in the Reason docs.", "rendered": "It says &quot;I understand that <code>age</code> is optional and that when I use the label I should pass an int. But I&#39;d like to forward an <code>option</code> value explicitly&quot;. This isn&#39;t a JSX trick we&#39;ve made up; it&#39;s just a language feature! See the section on &quot;Explicitly Passed Optional&quot; in the <a href=\"https://reasonml.github.io/docs/en/function.html#explicitly-passed-optional\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason docs</a>.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let ageFromProps = Some(10);\nlet _ = <Foo name=\"Reason\" age=?ageFromProps />", "rendered": "<pre><code>let ageFromProps = Some(10);\nlet _ = <Foo name=\"Reason\" age=?ageFromProps /></code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Cumbersome. Fortunately, here&#39;s a better way to explicitly pass an optional value:", "rendered": "Cumbersome. Fortunately, here&#39;s a better way to explicitly pass an optional value:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let ageFromProps = Some(10);\nswitch (ageFromProps) {\n| None => <Foo name=\"Reason\" />\n| Some(nonNullableAge) => <Foo name=\"Reason\" age=nonNullableAge />\n}", "rendered": "<pre><code>let ageFromProps = Some(10);\nswitch (ageFromProps) {\n| None => <Foo name=\"Reason\" />\n| Some(nonNullableAge) => <Foo name=\"Reason\" age=nonNullableAge />\n}</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Because age expects a normal int when you do call Foo with it, not an option int! Naively, you&#39;d be forced to solve this like so:", "rendered": "Because <code>age</code> expects a normal <code>int</code> when you do call <code>Foo</code> with it, not an <code>option int</code>! Naively, you&#39;d be forced to solve this like so:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let ageFromProps = Some(10);\nlet _ = <Foo name=\"Reason\" age=ageFromProps />", "rendered": "<pre><code>let ageFromProps = Some(10);\nlet _ = <Foo name=\"Reason\" age=ageFromProps /></code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "In Reason, if you want to explicitly pass an optional ageFromProps (whose type is option int, aka None | Some int), the following wouldn&#39;t work:", "rendered": "In Reason, if you want to explicitly pass an optional <code>ageFromProps</code> (whose type is <code>option int</code>, aka <code>None | Some int</code>), the following wouldn&#39;t work:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "This is a source of bugs, because this.props.age might be accidentally changed to a nullable number while Foo doesn&#39;t expect it to be so, or vice-versa; it might be nullable before, and now it&#39;s not and Foo is left with a useless null check somewhere in the render.", "rendered": "This is a source of bugs, because <code>this.props.age</code> might be accidentally changed to a nullable number while <code>Foo</code> doesn&#39;t expect it to be so, or vice-versa; it might be nullable before, and now it&#39;s not and <code>Foo</code> is left with a useless null check somewhere in the render.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "<Foo name=\"Reason\" age={this.props.age} />", "rendered": "<pre><code><Foo name=\"Reason\" age={this.props.age} /></code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Sometimes in ReactJS, you&#39;re being given a prop from the owner that you&#39;d like to forward directly to the child:", "rendered": "Sometimes in ReactJS, you&#39;re being given a prop from the owner that you&#39;d like to forward directly to the child:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let module Foo = {\n  let component = ReasonReact.statelessComponent(\"Foo\");\n  let make = (~name, ~age=?, children: array(ReasonReact.reactElement)) => {\n    ...component,\n    render: (_) => ReasonReact.stringToElement(name ++ (switch age { | None => \"\" | Some(age) => \" is \" ++ string_of_int(age)}))\n  }\n};", "rendered": "<pre><code>let module Foo = {\n  let component = ReasonReact.statelessComponent(\"Foo\");\n  let make = (~name, ~age=?, children: array(ReasonReact.reactElement)) => {\n    ...component,\n    render: (_) => ReasonReact.stringToElement(name ++ (switch age { | None => \"\" | Some(age) => \" is \" ++ string_of_int(age)}))\n  }\n};</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html#Neat-Trick-with-Props-Forwarding", "title": "Neat Trick with Props Forwarding", "contents": "", "rendered": "", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Following that example, you&#39;d call that component in another file through &lt;Foo name=&quot;Reason&quot; /&gt;. className, if omitted, defaults to &quot;box&quot;. age defaults to None. If you&#39;d like to explicitly pass age, simply do so: &lt;Foo name=&quot;Reason&quot; age=20 /&gt;.", "rendered": "Following that example, you&#39;d call that component in another file through <code>&lt;Foo name=&quot;Reason&quot; /&gt;</code>. <code>className</code>, if omitted, defaults to &quot;box&quot;. <code>age</code> defaults to <code>None</code>. If you&#39;d like to explicitly pass <code>age</code>, simply do so: <code>&lt;Foo name=&quot;Reason&quot; age=20 /&gt;</code>.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "The prop name cannot be ref nor key. Those are reserved, just like in ReactJS.", "rendered": "<strong>The prop name cannot be <code>ref</code> nor <code>key</code></strong>. Those are reserved, just like in ReactJS.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "The last prop must be children. If you don&#39;t use it, simply ignore it by naming it _ or _children. Names starting with underscore don&#39;t trigger compiler warnings if they&#39;re unused.", "rendered": "The last prop <strong>must</strong> be <code>children</code>. If you don&#39;t use it, simply ignore it by naming it <code>_</code> or <code>_children</code>. Names starting with underscore don&#39;t trigger compiler warnings if they&#39;re unused.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Props are just the labeled arguments of the make function, seen above. They can also be optional and/or have defaults, e.g. let make = (~name, ~age=?, ~className=&quot;box&quot;, _children) =&gt; ....", "rendered": "Props are just the labeled arguments of the <code>make</code> function, seen above. They can also be optional and/or have defaults, e.g. <code>let make = (~name, ~age=?, ~className=&quot;box&quot;, _children) =&gt; ...</code>.", "breadcrumb": "Creation"},
{"href": "./Creation.html#Props", "title": "Props", "contents": "", "rendered": "", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Since make is called at every JSX invocation, you&#39;d be accidentally creating a fresh new component every time.", "rendered": "Since <code>make</code> is called at every JSX invocation, you&#39;d be accidentally creating a fresh new component every time.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "# open ReasonReact;\nlet make = _children => {\n  ...(ReasonReact.statelessComponent(\"Greeting\")),\n  render: self => <div />\n}", "rendered": "<pre><code># open ReasonReact;\nlet make = _children => {\n  ...(ReasonReact.statelessComponent(\"Greeting\")),\n  render: self => <div />\n}</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "Note: do not inline let component into the make function body like the following!", "rendered": "<strong>Note</strong>: do <strong>not</strong> inline <code>let component</code> into the <code>make</code> function body like the following!", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "make asks you to return the component record created above. You&#39;d override a few fields, such as the familiar render, initialState, didMount, etc., all described later.", "rendered": "<code>make</code> asks you to return the component record created above. You&#39;d override a few fields, such as the familiar <code>render</code>, <code>initialState</code>, <code>didMount</code>, etc., all described later.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "/* call the `make` function in the module `Greeting` */\nReasonReact.element(Greeting.make(~name=\"John\", [||]))\n/* equivalent to <Greeting name=\"John\" /> */", "rendered": "<pre><code>/* call the `make` function in the module `Greeting` */\nReasonReact.element(Greeting.make(~name=\"John\", [||]))\n/* equivalent to <Greeting name=\"John\" /> */</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let module Greeting = {\n  let component = ReasonReact.statelessComponent(\"Greeting\");\n\n  let make = (~name, _children) => {\n    ...component, /* spread the template's other defaults into here  */\n    render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n  };\n};", "rendered": "<pre><code>let module Greeting = {\n  let component = ReasonReact.statelessComponent(\"Greeting\");\n\n  let make = (~name, _children) => {\n    ...component, /* spread the template's other defaults into here  */\n    render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n  };\n};</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "The make function is what&#39;s called by ReasonReact&#39;s JSX, described later. For now, the JSX-less way of calling &amp; rendering a component is:", "rendered": "The <code>make</code> function is what&#39;s called by ReasonReact&#39;s JSX, described later. For now, the JSX-less way of calling &amp; rendering a component is:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "/* still in Greeting.re */\nlet component = ReasonReact.statelessComponent(\"Greeting\");\n\nlet make = (~name, _children) => {\n  ...component, /* spread the template's other defaults into here  */\n  render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n};", "rendered": "<pre><code>/* still in Greeting.re */\nlet component = ReasonReact.statelessComponent(\"Greeting\");\n\nlet make = (~name, _children) => {\n  ...component, /* spread the template's other defaults into here  */\n  render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n};</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "In ReactJS, you&#39;d create a component class and call it through JSX which transforms into React.createElement(myClass, {prop1: &#39;hello&#39;}) under the hood. In ReasonReact, instead of passing the whole &quot;class&quot; (aka component template) into a hypothetical ReasonReact.createElement function, you&#39;d instead declare a make function:", "rendered": "<strong>In ReactJS</strong>, you&#39;d create a component class and call it through JSX which transforms into <code>React.createElement(myClass, {prop1: &#39;hello&#39;})</code> under the hood. <strong>In ReasonReact</strong>, instead of passing the whole &quot;class&quot; (aka component template) into a hypothetical <code>ReasonReact.createElement</code> function, you&#39;d instead declare a <code>make</code> function:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"Greeting\");", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"Greeting\");</code></pre>", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "As an example, here&#39;s the file Greeting.re:", "rendered": "As an example, here&#39;s the file <code>Greeting.re</code>:", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "The component template is created through ReasonReact.statelessComponent(&quot;TheComponentName&quot;). The string being passed is for debugging purposes (the equivalent of ReactJS&#39; displayName).", "rendered": "The component template is created through <code>ReasonReact.statelessComponent(&quot;TheComponentName&quot;)</code>. The string being passed is for debugging purposes (the equivalent of ReactJS&#39; <a href=\"https://reactjs.org/docs/react-component.html#displayname\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>displayName</code></a>).", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "ReasonReact doesn&#39;t use/need classes. The component creation API gives you a plain record, whose fields (like render) you can override.", "rendered": "ReasonReact doesn&#39;t use/need classes. The component creation API gives you a plain record, whose fields (like <code>render</code>) you can override.", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "The documentation assumes relative familiarity with ReactJS.", "rendered": "<em>The documentation assumes relative familiarity with ReactJS.</em>", "breadcrumb": "Creation"},
{"href": "./Creation.html#title--Creation--Props--amp--Self", "title": "title: Creation, Props &amp; Self", "contents": "", "rendered": "", "breadcrumb": "Creation"},
{"href": "./Creation.html", "title": "Creation", "contents": "", "rendered": "<hr/>", "breadcrumb": "Creation"},
{"href": "./index.html", "title": "Home", "contents": "See the README inside src for more info!", "rendered": "See the README inside <code>src</code> for more info!", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Then add some files somewhere (don&#39;t forget to change bsconfig.json, if needed).", "rendered": "Then add some files somewhere (don&#39;t forget to change <code>bsconfig.json</code>, if needed).", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "git clone https://github.com/reasonml/reason-react.git\ncd reason-react\nnpm install\nnpm start", "rendered": "<pre><code>git clone https://github.com/reasonml/reason-react.git\ncd reason-react\nnpm install\nnpm start</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Contribute", "title": "Contribute", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See https://reasonml.github.io/reason-react/", "rendered": "See https://reasonml.github.io/reason-react/", "breadcrumb": "Home"},
{"href": "./index.html#Documentation", "title": "Documentation", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See https://github.com/reasonml-community/reason-react-example", "rendered": "See https://github.com/reasonml-community/reason-react-example", "breadcrumb": "Home"},
{"href": "./index.html#Usage", "title": "Usage", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm install --save reason-react", "rendered": "<pre><code>npm install --save reason-react</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "reason-react", "rendered": "<img src='https://cloud.githubusercontent.com/assets/1909539/25026859/84a5a4e8-205d-11e7-857b-777ce6909cfd.png' alt='reason-react' />", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Come join us in Discord!", "rendered": "Come join us in <a href=\"https://discord.gg/reasonml\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Discord</a>!", "breadcrumb": "Home"},
{"href": "./index.html#ReasonReact", "title": "ReasonReact", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-createClass", "title": "createClass", "contents": "createClass ", "rendered": "<h4 class='item'>let createClass = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-reactNoopUpdateQueue", "title": "reactNoopUpdateQueue", "contents": "reactNoopUpdateQueue ", "rendered": "<h4 class='item'>let reactNoopUpdateQueue = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-factory", "title": "factory", "contents": "factory ", "rendered": "<h4 class='item'>let factory = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-emptyObject", "title": "emptyObject", "contents": "emptyObject Js t", "rendered": "<h4 class='item'>let emptyObject = Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-_assign", "title": "_assign", "contents": "_assign Js t Js t Js t  ", "rendered": "<h4 class='item'>let _assign = (\n    Js.t(&lt; .. &gt;),\n    Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html", "title": "ReasonReactOptimizedCreateClass", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html", "title": "ReasonReactOptimizedCreateClass", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#ReasonReactOptimizedCreateClass", "title": "ReasonReactOptimizedCreateClass", "contents": "", "rendered": "", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReact.html#value-element", "title": "element", "contents": "element option string option Js nullable reactRef unit  component reactElement key ref ", "rendered": "<h4 class='item'>let element = (\n    ~?key: option(string),\n    ~?ref: option(Js.nullable(<a href=\"./api/ReasonReact.html#type-reactRef\">reactRef</a>) => unit),\n    <a href=\"./api/ReasonReact.html#type-component\">component</a>(\n        'state,\n        'retainedProps,\n        'action\n    )\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-component", "title": "component", "contents": "component componentSpec", "rendered": "<h4 class='item'>type component(\n    'state,\n    'retainedProps,\n    'action\n) = <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    'state,\n    'retainedProps,\n    'retainedProps,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-jsElementWrapped", "title": "jsElementWrapped", "contents": " For internal use only ", "rendered": " For internal use only ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-jsElementWrapped", "title": "jsElementWrapped", "contents": "jsElementWrapped ", "rendered": "<h4 class='item'>type jsElementWrapped</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactClassInternal", "title": "reactClassInternal", "contents": "reactClassInternal ", "rendered": "<h4 class='item'>type reactClassInternal</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-actionless", "title": "actionless", "contents": " An actionless component is a component with actions of type unit ", "rendered": " An actionless component is a component with actions of type unit ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-actionless", "title": "actionless", "contents": "actionless unit", "rendered": "<h4 class='item'>type actionless = unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-noRetainedProps", "title": "noRetainedProps", "contents": "noRetainedProps ", "rendered": "<h4 class='item'>type noRetainedProps</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-stateless", "title": "stateless", "contents": "A stateless component is a component with state of type unit. This cannot be\nabstract for now, because a stateless component&#39;s willReceiveProps needs to\nreturn the state, aka unit. We can provide a helper\nReasonReact.statelessReturn that&#39;s of type stateless, but that&#39;s verbose", "rendered": "A stateless component is a component with state of type unit. This cannot be\nabstract for now, because a stateless component&#39;s willReceiveProps needs to\nreturn the state, aka unit. We can provide a helper\nReasonReact.statelessReturn that&#39;s of type <code>stateless</code>, but that&#39;s verbose", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-stateless", "title": "stateless", "contents": "stateless unit", "rendered": "<h4 class='item'>type stateless = unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-renderNotImplemented", "title": "renderNotImplemented", "contents": "renderNotImplemented ", "rendered": "<h4 class='item'>type renderNotImplemented = | RenderNotImplemented\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-cloneElement", "title": "cloneElement", "contents": "cloneElement reactElement option Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let cloneElement = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>,\n    ~?props: option(Js.t(&lt; .. &gt;)),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-createElement", "title": "createElement", "contents": "createElement reactClass option Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let createElement = (\n    <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a>,\n    ~?props: option(Js.t(&lt; .. &gt;)),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactRef", "title": "reactRef", "contents": "reactRef ", "rendered": "<h4 class='item'>type reactRef</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactElement", "title": "reactElement", "contents": "reactElement ", "rendered": "<h4 class='item'>type reactElement</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "code block", "contents": "# let module Foo = {\n#    let make = (~attr1, ~attrn, children) => ReasonReact.statelessComponent(\"Foo\");\n# };\nlet a = <Foo key=\"\" ref=((_) => ()) attr1=0 attrn=1 />;\nlet b = ReasonReact.element(\n  ~key=\"\", ~ref=((_) => ()),\n  Foo.make(~attr1=0, ~attrn=1, [| |])\n);", "rendered": "<pre><code># let module Foo = {\n#    let make = (~attr1, ~attrn, children) => ReasonReact.statelessComponent(\"Foo\");\n# };\nlet a = <Foo key=\"\" ref=((_) => ()) attr1=0 attrn=1 />;\nlet b = ReasonReact.element(\n  ~key=\"\", ~ref=((_) => ()),\n  Foo.make(~attr1=0, ~attrn=1, [| |])\n);</code></pre>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactClass", "title": "reactClass", "contents": "reactClass ", "rendered": "<h4 class='item'>type reactClass</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-componentSpec", "title": "componentSpec", "contents": "componentSpec debugName string reactClassInternal reactClassInternal handedOffState Pervasives ref option willReceiveProps self  didMount self update  didUpdate oldNewSelf unit  willUnmount self unit  willUpdate oldNewSelf unit  shouldUpdate oldNewSelf bool  render self reactElement  initialState unit  retainedProps reducer update   subscriptions self list subscription  jsElementWrapped jsElementWrapped", "rendered": "<h4 class='item'>type componentSpec(\n    'state,\n    'initialState,\n    'retainedProps,\n    'initialRetainedProps,\n    'action\n) = {\n    debugName: string,\n    reactClassInternal: <a href=\"./api/ReasonReact.html#type-reactClassInternal\">reactClassInternal</a>,\n    mut handedOffState: Pervasives.ref(option('state)),\n    willReceiveProps: <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => 'state,\n    didMount: <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => <a href=\"./api/ReasonReact.html#type-update\">update</a>('state, 'retainedProps, 'action),\n    didUpdate: <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => unit,\n    willUnmount: <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => unit,\n    willUpdate: <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => unit,\n    shouldUpdate: <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => bool,\n    render: <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>,\n    initialState: unit => 'initialState,\n    retainedProps: 'initialRetainedProps,\n    reducer: ('action, 'state) => <a href=\"./api/ReasonReact.html#type-update\">update</a>(\n        'state,\n        'retainedProps,\n        'action\n    ),\n    subscriptions: <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n        'state,\n        'retainedProps,\n        'action\n    ) => list(<a href=\"./api/ReasonReact.html#type-subscription\">subscription</a>),\n    jsElementWrapped: <a href=\"./api/ReasonReact.html#type-jsElementWrapped\">jsElementWrapped</a>\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-oldNewSelf", "title": "oldNewSelf", "contents": "oldNewSelf oldSelf self newSelf self", "rendered": "<h4 class='item'>type oldNewSelf('state, 'retainedProps, 'action) = {\n    oldSelf: <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action),\n    newSelf: <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-subscription", "title": "subscription", "contents": "subscription unit  unit  subscription", "rendered": "<h4 class='item'>type subscription = \n    | Sub(unit => 'token, 'token => unit): <a href=\"./api/ReasonReact.html#type-subscription\">subscription</a>\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reduce", "title": "reduce", "contents": "reduce  Callback t ", "rendered": "<h4 class='item'>type reduce(\n    'payload,\n    'action\n) = 'payload => 'action => <a href=\"./api/ReasonReact.html#module-Callback\">Callback</a>.<a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-update", "title": "update", "contents": "update self unit  self unit ", "rendered": "<h4 class='item'>type update('state, 'retainedProps, 'action) = \n    | NoUpdate\n    | Update('state)\n    | SideEffects(\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action) => unit\n    )\n    | UpdateWithSideEffects(\n        'state,\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action) => unit\n    )\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-self", "title": "self", "contents": "self handle reduce state retainedProps send unit  onUnmount unit unit  unit ", "rendered": "<h4 class='item'>type self('state, 'retainedProps, 'action) = {\n    handle: 'payload.\n  ('payload -&gt; ('state, 'retainedProps, 'action) self -&gt; unit) -&gt;\n  'payload Callback.t,\n    reduce: 'payload. ('payload, 'action) reduce,\n    state: 'state,\n    retainedProps: 'retainedProps,\n    send: 'action => unit,\n    onUnmount: unit => unit => unit\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.chain", "title": "Callback.chain", "contents": " Chain two callbacks by executing the first before the second one ", "rendered": " Chain two callbacks by executing the first before the second one ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.chain", "title": "Callback.chain", "contents": "chain t t t  ", "rendered": "<h4 class='item'>let chain = (<a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload), <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)) => <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.default", "title": "Callback.default", "contents": " Default no-op callback ", "rendered": " Default no-op callback ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.default", "title": "Callback.default", "contents": "default t", "rendered": "<h4 class='item'>let default = <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Callback.t", "title": "Callback.t", "contents": "However, we do want to support immediate calling of a handler, as an escape hatch for the existing async\nsetState reactJS pattern", "rendered": "However, we do want to support immediate calling of a handler, as an escape hatch for the existing async\nsetState reactJS pattern", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "code block", "contents": "type t('payload);", "rendered": "<pre><code>type t('payload);</code></pre>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Callback.t", "title": "Callback.t", "contents": "This type can be left abstract to prevent calling the callback directly.\nFor example, calling update handler event would force an immediate\ncall of handler with the current state, and can be prevented by defining:", "rendered": "This type can be left abstract to prevent calling the callback directly.\nFor example, calling <code>update handler event</code> would force an immediate\ncall of <code>handler</code> with the current state, and can be prevented by defining:", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Callback.t", "title": "Callback.t", "contents": "Type for callbacks", "rendered": "Type for callbacks", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Callback.t", "title": "Callback.t", "contents": "t unit ", "rendered": "<h4 class='item'>type t('payload) = 'payload => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Callback", "title": "Callback", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Callback", "title": "Callback", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": "So, the correct (and idiomatic) usage of this helper is to only use it in a component that&#39;s also subscribed to\nwatchUrl. Please see https://github.com/reasonml-community/reason-react-example/blob/master/src/todomvc/TodoItem.re\nfor an example.", "rendered": "So, the correct (and idiomatic) usage of this helper is to only use it in a component that&#39;s also subscribed to\nwatchUrl. Please see https://github.com/reasonml-community/reason-react-example/blob/master/src/todomvc/TodoItem.re\nfor an example.", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": "But this helper is sometimes needed, if you&#39;d like to initialize a page whose display/state depends on the URL,\ninstead of reading from it in watchUrl&#39;s callback, which you&#39;d probably have put inside didMount (aka too late,\nthe page&#39;s already rendered).", "rendered": "But this helper is sometimes needed, if you&#39;d like to initialize a page whose display/state depends on the URL,\ninstead of reading from it in watchUrl&#39;s callback, which you&#39;d probably have put inside didMount (aka too late,\nthe page&#39;s already rendered).", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": "this is marked as &quot;dangerous&quot; because you technically shouldn&#39;t be accessing the URL outside of watchUrl&#39;s callback;\nyou&#39;d read a potentially stale url, instead of the fresh one inside watchUrl.", "rendered": "this is marked as &quot;dangerous&quot; because you technically shouldn&#39;t be accessing the URL outside of watchUrl&#39;s callback;\nyou&#39;d read a potentially stale url, instead of the fresh one inside watchUrl.", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": "dangerouslyGetInitialUrl unit url ", "rendered": "<h4 class='item'>let dangerouslyGetInitialUrl = unit => <a href=\"./api/ReasonReact.html#type-Router.url\">url</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.unwatchUrl", "title": "Router.unwatchUrl", "contents": " stop watching for URL changes ", "rendered": " stop watching for URL changes ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.unwatchUrl", "title": "Router.unwatchUrl", "contents": "unwatchUrl watcherID unit ", "rendered": "<h4 class='item'>let unwatchUrl = <a href=\"./api/ReasonReact.html#type-Router.watcherID\">watcherID</a> => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.watchUrl", "title": "Router.watchUrl", "contents": " start watching for URL changes. Returns a subscription token. Upon url change, calls the callback and passes it the url record ", "rendered": " start watching for URL changes. Returns a subscription token. Upon url change, calls the callback and passes it the url record ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.watchUrl", "title": "Router.watchUrl", "contents": "watchUrl url unit  watcherID ", "rendered": "<h4 class='item'>let watchUrl = <a href=\"./api/ReasonReact.html#type-Router.url\">url</a> => unit => <a href=\"./api/ReasonReact.html#type-Router.watcherID\">watcherID</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Router.url", "title": "Router.url", "contents": "url path list string hash string search string", "rendered": "<h4 class='item'>type url = {\n    path: list(string),\n    hash: string,\n    search: string\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Router.watcherID", "title": "Router.watcherID", "contents": "watcherID ", "rendered": "<h4 class='item'>type watcherID</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.push", "title": "Router.push", "contents": " update the url with the string path. Example: push(&quot;/book/1&quot;), push(&quot;/books#title&quot;)", "rendered": " update the url with the string path. Example: <code>push(&quot;/book/1&quot;)</code>, <code>push(&quot;/books#title&quot;)</code>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.push", "title": "Router.push", "contents": "push string unit ", "rendered": "<h4 class='item'>let push = string => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Router", "title": "Router", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Router", "title": "Router", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-refToJsObj", "title": "refToJsObj", "contents": " Unsafe get an untyped javascript object representation of a react ref. ", "rendered": " <strong>Unsafe</strong> get an untyped javascript object representation of a react ref. ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-refToJsObj", "title": "refToJsObj", "contents": "refToJsObj reactRef Js t ", "rendered": "<h4 class='item'>let refToJsObj = <a href=\"./api/ReasonReact.html#type-reactRef\">reactRef</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-jsPropsToReason", "title": "jsPropsToReason", "contents": "jsPropsToReason Js t component ", "rendered": "<h4 class='item'>type jsPropsToReason(\n    'jsProps,\n    'state,\n    'retainedProps,\n    'action\n) = Js.t('jsProps) => <a href=\"./api/ReasonReact.html#type-component\">component</a>(\n    'state,\n    'retainedProps,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-createDomElement", "title": "createDomElement", "contents": "createDomElement string Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let createDomElement = (\n    string,\n    ~props: Js.t(&lt; .. &gt;),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-wrapJsForReason", "title": "wrapJsForReason", "contents": "wrapJsForReason reactClass Js t component stateless noRetainedProps actionless reactClass props ", "rendered": "<h4 class='item'>let wrapJsForReason = (\n    ~reactClass: <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a>,\n    ~props: Js.t(&lt; .. &gt;),\n    'a\n) => <a href=\"./api/ReasonReact.html#type-component\">component</a>(<a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>, <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>, <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-wrapReasonForJs", "title": "wrapReasonForJs", "contents": "wrapReasonForJs componentSpec jsPropsToReason reactClass component ", "rendered": "<h4 class='item'>let wrapReasonForJs = (\n    ~component: <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n        'state,\n        'initialState,\n        'retainedProps,\n        'initialRetainedProps,\n        'action\n    ),\n    <a href=\"./api/ReasonReact.html#type-jsPropsToReason\">jsPropsToReason</a>('a, 'a, 'a, 'a)\n) => <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-reducerComponentWithRetainedProps", "title": "reducerComponentWithRetainedProps", "contents": "reducerComponentWithRetainedProps string componentSpec stateless noRetainedProps ", "rendered": "<h4 class='item'>let reducerComponentWithRetainedProps = string => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    'retainedProps,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-statelessComponentWithRetainedProps", "title": "statelessComponentWithRetainedProps", "contents": "statelessComponentWithRetainedProps string componentSpec stateless stateless noRetainedProps actionless ", "rendered": "<h4 class='item'>let statelessComponentWithRetainedProps = string => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    'retainedProps,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-reducerComponent", "title": "reducerComponent", "contents": "reducerComponent string componentSpec stateless noRetainedProps noRetainedProps ", "rendered": "<h4 class='item'>let reducerComponent = string => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-statelessComponent", "title": "statelessComponent", "contents": " Create a stateless component: i.e. a component where state has type stateless. ", "rendered": " Create a stateless component: i.e. a component where state has type stateless. ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-statelessComponent", "title": "statelessComponent", "contents": "statelessComponent string componentSpec stateless stateless noRetainedProps noRetainedProps actionless ", "rendered": "<h4 class='item'>let statelessComponent = string => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-nullElement", "title": "nullElement", "contents": "nullElement reactElement", "rendered": "<h4 class='item'>let nullElement = <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-arrayToElement", "title": "arrayToElement", "contents": " Convert an array of keyed react elements to a react element. ", "rendered": " Convert an array of keyed react elements to a react element. ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-arrayToElement", "title": "arrayToElement", "contents": "arrayToElement array reactElement reactElement ", "rendered": "<h4 class='item'>let arrayToElement = array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "code block", "contents": "<div>\n (ReasonReact.stringToElement(\"Hello folks\"))\n</div>", "rendered": "<pre><code><div>\n (ReasonReact.stringToElement(\"Hello folks\"))\n</div></code></pre>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-stringToElement", "title": "stringToElement", "contents": "In Reason&#39;s JSX, text is not automatically wrapped, you have to do it manually:", "rendered": "In Reason&#39;s JSX, text is not automatically wrapped, you have to do it manually:", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-stringToElement", "title": "stringToElement", "contents": "Use this for creating an element that&#39;s just text.", "rendered": "Use this for creating an element that&#39;s just text.", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-stringToElement", "title": "stringToElement", "contents": "stringToElement string reactElement ", "rendered": "<h4 class='item'>let stringToElement = string => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "ReasonReact", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#The-types-you--39-ll-encounter", "title": "The types you&#39;ll encounter", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#Event-handling", "title": "Event handling", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#The-Router", "title": "The Router", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#JavaScript-Interop", "title": "JavaScript Interop", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#Component-constructors", "title": "Component constructors", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#Element-creators", "title": "Element creators", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "ReasonReact", "contents": "This is the main exposted API.", "rendered": "This is the main exposted API.", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#ReasonReact", "title": "ReasonReact", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReactEventRe.html#value-Transition.elapsedTime", "title": "Transition.elapsedTime", "contents": "elapsedTime t float ", "rendered": "<h4 class='item'>let elapsedTime = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.pseudoElement", "title": "Transition.pseudoElement", "contents": "pseudoElement t string ", "rendered": "<h4 class='item'>let pseudoElement = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.propertyName", "title": "Transition.propertyName", "contents": "propertyName t string ", "rendered": "<h4 class='item'>let propertyName = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.persist", "title": "Transition.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition._type", "title": "Transition._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.timeStamp", "title": "Transition.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.target", "title": "Transition.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isPropagationStopped", "title": "Transition.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.stopPropagation", "title": "Transition.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isDefaultPrevented", "title": "Transition.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.preventDefault", "title": "Transition.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.nativeEvent", "title": "Transition.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isTrusted", "title": "Transition.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.eventPhase", "title": "Transition.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.defaultPrevented", "title": "Transition.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.currentTarget", "title": "Transition.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.cancelable", "title": "Transition.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.bubbles", "title": "Transition.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Transition.t", "title": "Transition.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Transition.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Transition.tag", "title": "Transition.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Transition", "title": "Transition", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Transition", "title": "Transition", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.elapsedTime", "title": "Animation.elapsedTime", "contents": "elapsedTime t float ", "rendered": "<h4 class='item'>let elapsedTime = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.pseudoElement", "title": "Animation.pseudoElement", "contents": "pseudoElement t string ", "rendered": "<h4 class='item'>let pseudoElement = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.animationName", "title": "Animation.animationName", "contents": "animationName t string ", "rendered": "<h4 class='item'>let animationName = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.persist", "title": "Animation.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation._type", "title": "Animation._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.timeStamp", "title": "Animation.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.target", "title": "Animation.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isPropagationStopped", "title": "Animation.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.stopPropagation", "title": "Animation.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isDefaultPrevented", "title": "Animation.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.preventDefault", "title": "Animation.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.nativeEvent", "title": "Animation.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isTrusted", "title": "Animation.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.eventPhase", "title": "Animation.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.defaultPrevented", "title": "Animation.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.currentTarget", "title": "Animation.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.cancelable", "title": "Animation.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.bubbles", "title": "Animation.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Animation.t", "title": "Animation.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Animation.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Animation.tag", "title": "Animation.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Animation", "title": "Animation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Animation", "title": "Animation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.persist", "title": "Image.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image._type", "title": "Image._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.timeStamp", "title": "Image.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.target", "title": "Image.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isPropagationStopped", "title": "Image.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.stopPropagation", "title": "Image.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isDefaultPrevented", "title": "Image.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.preventDefault", "title": "Image.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.nativeEvent", "title": "Image.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isTrusted", "title": "Image.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.eventPhase", "title": "Image.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.defaultPrevented", "title": "Image.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.currentTarget", "title": "Image.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.cancelable", "title": "Image.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.bubbles", "title": "Image.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Image.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Image.t", "title": "Image.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Image.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Image.tag", "title": "Image.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Image", "title": "Image", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Image", "title": "Image", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.persist", "title": "Media.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media._type", "title": "Media._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.timeStamp", "title": "Media.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.target", "title": "Media.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isPropagationStopped", "title": "Media.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.stopPropagation", "title": "Media.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isDefaultPrevented", "title": "Media.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.preventDefault", "title": "Media.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.nativeEvent", "title": "Media.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isTrusted", "title": "Media.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.eventPhase", "title": "Media.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.defaultPrevented", "title": "Media.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.currentTarget", "title": "Media.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.cancelable", "title": "Media.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.bubbles", "title": "Media.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Media.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Media.t", "title": "Media.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Media.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Media.tag", "title": "Media.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Media", "title": "Media", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Media", "title": "Media", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaZ", "title": "Wheel.deltaZ", "contents": "deltaZ t float ", "rendered": "<h4 class='item'>let deltaZ = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaY", "title": "Wheel.deltaY", "contents": "deltaY t float ", "rendered": "<h4 class='item'>let deltaY = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaX", "title": "Wheel.deltaX", "contents": "deltaX t float ", "rendered": "<h4 class='item'>let deltaX = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaMode", "title": "Wheel.deltaMode", "contents": "deltaMode t int ", "rendered": "<h4 class='item'>let deltaMode = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.persist", "title": "Wheel.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel._type", "title": "Wheel._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.timeStamp", "title": "Wheel.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.target", "title": "Wheel.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isPropagationStopped", "title": "Wheel.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.stopPropagation", "title": "Wheel.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isDefaultPrevented", "title": "Wheel.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.preventDefault", "title": "Wheel.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.nativeEvent", "title": "Wheel.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isTrusted", "title": "Wheel.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.eventPhase", "title": "Wheel.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.defaultPrevented", "title": "Wheel.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.currentTarget", "title": "Wheel.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.cancelable", "title": "Wheel.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.bubbles", "title": "Wheel.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Wheel.t", "title": "Wheel.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Wheel.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Wheel.tag", "title": "Wheel.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Wheel", "title": "Wheel", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Wheel", "title": "Wheel", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.view", "title": "UI.view", "contents": "view t Dom window ", "rendered": "<h4 class='item'>let view = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => Dom.window</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.detail", "title": "UI.detail", "contents": "detail t int ", "rendered": "<h4 class='item'>let detail = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.persist", "title": "UI.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI._type", "title": "UI._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.timeStamp", "title": "UI.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.target", "title": "UI.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isPropagationStopped", "title": "UI.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.stopPropagation", "title": "UI.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isDefaultPrevented", "title": "UI.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.preventDefault", "title": "UI.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.nativeEvent", "title": "UI.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isTrusted", "title": "UI.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.eventPhase", "title": "UI.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.defaultPrevented", "title": "UI.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.currentTarget", "title": "UI.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.cancelable", "title": "UI.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.bubbles", "title": "UI.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-UI.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-UI.t", "title": "UI.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-UI.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-UI.tag", "title": "UI.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-UI", "title": "UI", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-UI", "title": "UI", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.touches", "title": "Touch.touches", "contents": "touches t Js t ", "rendered": "<h4 class='item'>let touches = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.targetTouches", "title": "Touch.targetTouches", "contents": "targetTouches t Js t ", "rendered": "<h4 class='item'>let targetTouches = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.shiftKey", "title": "Touch.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.metaKey", "title": "Touch.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.getModifierState", "title": "Touch.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.ctrlKey", "title": "Touch.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.changedTouches", "title": "Touch.changedTouches", "contents": "changedTouches t Js t ", "rendered": "<h4 class='item'>let changedTouches = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.altKey", "title": "Touch.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.persist", "title": "Touch.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch._type", "title": "Touch._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.timeStamp", "title": "Touch.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.target", "title": "Touch.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isPropagationStopped", "title": "Touch.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.stopPropagation", "title": "Touch.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isDefaultPrevented", "title": "Touch.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.preventDefault", "title": "Touch.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.nativeEvent", "title": "Touch.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isTrusted", "title": "Touch.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.eventPhase", "title": "Touch.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.defaultPrevented", "title": "Touch.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.currentTarget", "title": "Touch.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.cancelable", "title": "Touch.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.bubbles", "title": "Touch.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Touch.t", "title": "Touch.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Touch.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Touch.tag", "title": "Touch.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Touch", "title": "Touch", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Touch", "title": "Touch", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.persist", "title": "Selection.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection._type", "title": "Selection._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.timeStamp", "title": "Selection.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.target", "title": "Selection.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isPropagationStopped", "title": "Selection.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.stopPropagation", "title": "Selection.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isDefaultPrevented", "title": "Selection.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.preventDefault", "title": "Selection.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.nativeEvent", "title": "Selection.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isTrusted", "title": "Selection.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.eventPhase", "title": "Selection.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.defaultPrevented", "title": "Selection.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.currentTarget", "title": "Selection.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.cancelable", "title": "Selection.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.bubbles", "title": "Selection.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Selection.t", "title": "Selection.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Selection.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Selection.tag", "title": "Selection.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Selection", "title": "Selection", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Selection", "title": "Selection", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.shiftKey", "title": "Mouse.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.screenY", "title": "Mouse.screenY", "contents": "screenY t int ", "rendered": "<h4 class='item'>let screenY = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.screenX", "title": "Mouse.screenX", "contents": "screenX t int ", "rendered": "<h4 class='item'>let screenX = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.relatedTarget", "title": "Mouse.relatedTarget", "contents": "relatedTarget t Dom element ", "rendered": "<h4 class='item'>let relatedTarget = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.pageY", "title": "Mouse.pageY", "contents": "pageY t int ", "rendered": "<h4 class='item'>let pageY = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.pageX", "title": "Mouse.pageX", "contents": "pageX t int ", "rendered": "<h4 class='item'>let pageX = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.metaKey", "title": "Mouse.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.getModifierState", "title": "Mouse.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.ctrlKey", "title": "Mouse.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.clientY", "title": "Mouse.clientY", "contents": "clientY t int ", "rendered": "<h4 class='item'>let clientY = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.clientX", "title": "Mouse.clientX", "contents": "clientX t int ", "rendered": "<h4 class='item'>let clientX = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.buttons", "title": "Mouse.buttons", "contents": "buttons t int ", "rendered": "<h4 class='item'>let buttons = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.button", "title": "Mouse.button", "contents": "button t int ", "rendered": "<h4 class='item'>let button = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.altKey", "title": "Mouse.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.persist", "title": "Mouse.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse._type", "title": "Mouse._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.timeStamp", "title": "Mouse.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.target", "title": "Mouse.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isPropagationStopped", "title": "Mouse.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.stopPropagation", "title": "Mouse.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isDefaultPrevented", "title": "Mouse.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.preventDefault", "title": "Mouse.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.nativeEvent", "title": "Mouse.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isTrusted", "title": "Mouse.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.eventPhase", "title": "Mouse.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.defaultPrevented", "title": "Mouse.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.currentTarget", "title": "Mouse.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.cancelable", "title": "Mouse.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.bubbles", "title": "Mouse.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Mouse.t", "title": "Mouse.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Mouse.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Mouse.tag", "title": "Mouse.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Mouse", "title": "Mouse", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Mouse", "title": "Mouse", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.persist", "title": "Form.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form._type", "title": "Form._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.timeStamp", "title": "Form.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.target", "title": "Form.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isPropagationStopped", "title": "Form.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.stopPropagation", "title": "Form.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isDefaultPrevented", "title": "Form.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.preventDefault", "title": "Form.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.nativeEvent", "title": "Form.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isTrusted", "title": "Form.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.eventPhase", "title": "Form.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.defaultPrevented", "title": "Form.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.currentTarget", "title": "Form.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.cancelable", "title": "Form.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.bubbles", "title": "Form.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Form.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Form.t", "title": "Form.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Form.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Form.tag", "title": "Form.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Form", "title": "Form", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Form", "title": "Form", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.relatedTarget", "title": "Focus.relatedTarget", "contents": "relatedTarget t Dom element ", "rendered": "<h4 class='item'>let relatedTarget = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.persist", "title": "Focus.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus._type", "title": "Focus._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.timeStamp", "title": "Focus.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.target", "title": "Focus.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isPropagationStopped", "title": "Focus.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.stopPropagation", "title": "Focus.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isDefaultPrevented", "title": "Focus.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.preventDefault", "title": "Focus.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.nativeEvent", "title": "Focus.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isTrusted", "title": "Focus.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.eventPhase", "title": "Focus.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.defaultPrevented", "title": "Focus.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.currentTarget", "title": "Focus.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.cancelable", "title": "Focus.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.bubbles", "title": "Focus.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Focus.t", "title": "Focus.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Focus.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Focus.tag", "title": "Focus.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Focus", "title": "Focus", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Focus", "title": "Focus", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.which", "title": "Keyboard.which", "contents": "which t int ", "rendered": "<h4 class='item'>let which = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.shiftKey", "title": "Keyboard.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.repeat", "title": "Keyboard.repeat", "contents": "repeat t bool ", "rendered": "<h4 class='item'>let repeat = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.metaKey", "title": "Keyboard.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.location", "title": "Keyboard.location", "contents": "location t int ", "rendered": "<h4 class='item'>let location = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.locale", "title": "Keyboard.locale", "contents": "locale t string ", "rendered": "<h4 class='item'>let locale = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.keyCode", "title": "Keyboard.keyCode", "contents": "keyCode t int ", "rendered": "<h4 class='item'>let keyCode = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.key", "title": "Keyboard.key", "contents": "key t string ", "rendered": "<h4 class='item'>let key = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.getModifierState", "title": "Keyboard.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.ctrlKey", "title": "Keyboard.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.charCode", "title": "Keyboard.charCode", "contents": "charCode t int ", "rendered": "<h4 class='item'>let charCode = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.altKey", "title": "Keyboard.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.persist", "title": "Keyboard.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard._type", "title": "Keyboard._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.timeStamp", "title": "Keyboard.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.target", "title": "Keyboard.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isPropagationStopped", "title": "Keyboard.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.stopPropagation", "title": "Keyboard.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isDefaultPrevented", "title": "Keyboard.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.preventDefault", "title": "Keyboard.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.nativeEvent", "title": "Keyboard.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isTrusted", "title": "Keyboard.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.eventPhase", "title": "Keyboard.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.defaultPrevented", "title": "Keyboard.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.currentTarget", "title": "Keyboard.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.cancelable", "title": "Keyboard.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.bubbles", "title": "Keyboard.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Keyboard.t", "title": "Keyboard.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Keyboard.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Keyboard.tag", "title": "Keyboard.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Keyboard", "title": "Keyboard", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Keyboard", "title": "Keyboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.data", "title": "Composition.data", "contents": "data t string ", "rendered": "<h4 class='item'>let data = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.persist", "title": "Composition.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition._type", "title": "Composition._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.timeStamp", "title": "Composition.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.target", "title": "Composition.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isPropagationStopped", "title": "Composition.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.stopPropagation", "title": "Composition.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isDefaultPrevented", "title": "Composition.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.preventDefault", "title": "Composition.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.nativeEvent", "title": "Composition.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isTrusted", "title": "Composition.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.eventPhase", "title": "Composition.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.defaultPrevented", "title": "Composition.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.currentTarget", "title": "Composition.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.cancelable", "title": "Composition.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.bubbles", "title": "Composition.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Composition.t", "title": "Composition.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Composition.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Composition.tag", "title": "Composition.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Composition", "title": "Composition", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Composition", "title": "Composition", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.clipboardData", "title": "Clipboard.clipboardData", "contents": "clipboardData t Js t ", "rendered": "<h4 class='item'>let clipboardData = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.persist", "title": "Clipboard.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard._type", "title": "Clipboard._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.timeStamp", "title": "Clipboard.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.target", "title": "Clipboard.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isPropagationStopped", "title": "Clipboard.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.stopPropagation", "title": "Clipboard.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isDefaultPrevented", "title": "Clipboard.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.preventDefault", "title": "Clipboard.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.nativeEvent", "title": "Clipboard.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isTrusted", "title": "Clipboard.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.eventPhase", "title": "Clipboard.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.defaultPrevented", "title": "Clipboard.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.currentTarget", "title": "Clipboard.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.cancelable", "title": "Clipboard.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.bubbles", "title": "Clipboard.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a> => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Clipboard.t", "title": "Clipboard.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Clipboard.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Clipboard.tag", "title": "Clipboard.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Clipboard", "title": "Clipboard", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Clipboard", "title": "Clipboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-toSyntheticEvent", "title": "toSyntheticEvent", "contents": "toSyntheticEvent synthetic Synthetic t ", "rendered": "<h4 class='item'>let toSyntheticEvent = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => <a href=\"./api/ReactEventRe.html#module-Synthetic\">Synthetic</a>.<a href=\"./api/ReactEventRe.html#type-Synthetic.t\">t</a></h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.persist", "title": "Synthetic.persist", "contents": "persist synthetic unit ", "rendered": "<h4 class='item'>let persist = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic._type", "title": "Synthetic._type", "contents": "_type synthetic string ", "rendered": "<h4 class='item'>let _type = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.timeStamp", "title": "Synthetic.timeStamp", "contents": "timeStamp synthetic float ", "rendered": "<h4 class='item'>let timeStamp = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.target", "title": "Synthetic.target", "contents": "target synthetic Dom element ", "rendered": "<h4 class='item'>let target = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isPropagationStopped", "title": "Synthetic.isPropagationStopped", "contents": "isPropagationStopped synthetic bool ", "rendered": "<h4 class='item'>let isPropagationStopped = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.stopPropagation", "title": "Synthetic.stopPropagation", "contents": "stopPropagation synthetic unit ", "rendered": "<h4 class='item'>let stopPropagation = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isDefaultPrevented", "title": "Synthetic.isDefaultPrevented", "contents": "isDefaultPrevented synthetic bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.preventDefault", "title": "Synthetic.preventDefault", "contents": "preventDefault synthetic unit ", "rendered": "<h4 class='item'>let preventDefault = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.nativeEvent", "title": "Synthetic.nativeEvent", "contents": "nativeEvent synthetic Js t ", "rendered": "<h4 class='item'>let nativeEvent = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isTrusted", "title": "Synthetic.isTrusted", "contents": "isTrusted synthetic bool ", "rendered": "<h4 class='item'>let isTrusted = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.eventPhase", "title": "Synthetic.eventPhase", "contents": "eventPhase synthetic int ", "rendered": "<h4 class='item'>let eventPhase = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.defaultPrevented", "title": "Synthetic.defaultPrevented", "contents": "defaultPrevented synthetic bool ", "rendered": "<h4 class='item'>let defaultPrevented = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.currentTarget", "title": "Synthetic.currentTarget", "contents": "currentTarget synthetic Dom element ", "rendered": "<h4 class='item'>let currentTarget = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.cancelable", "title": "Synthetic.cancelable", "contents": "cancelable synthetic bool ", "rendered": "<h4 class='item'>let cancelable = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.bubbles", "title": "Synthetic.bubbles", "contents": "bubbles synthetic bool ", "rendered": "<h4 class='item'>let bubbles = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Synthetic.t", "title": "Synthetic.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Synthetic.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Synthetic.tag", "title": "Synthetic.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Synthetic", "title": "Synthetic", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Synthetic", "title": "Synthetic", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-synthetic", "title": "synthetic", "contents": "synthetic ", "rendered": "<h4 class='item'>type synthetic('a)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html", "title": "ReactEventRe", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html", "title": "ReactEventRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#ReactEventRe", "title": "ReactEventRe", "contents": "", "rendered": "", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactDOMServerRe.html", "title": "ReactDOMServerRe", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactDOMServerRe"},
{"href": "./api/ReactDOMServerRe.html", "title": "ReactDOMServerRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMServerRe"},
{"href": "./api/ReactDOMServerRe.html#ReactDOMServerRe", "title": "ReactDOMServerRe", "contents": "", "rendered": "", "breadcrumb": "ReactDOMServerRe"},
{"href": "./api/ReactDOMRe.html#value-Style.unsafeAddProp", "title": "Style.unsafeAddProp", "contents": "unsafeAddProp style string string style   ", "rendered": "<h4 class='item'>let unsafeAddProp = (<a href=\"./api/ReactDOMRe.html#type-style\">style</a>, string, string) => <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-Style.combine", "title": "Style.combine", "contents": "combine style style style  ", "rendered": "<h4 class='item'>let combine = (<a href=\"./api/ReactDOMRe.html#type-style\">style</a>, <a href=\"./api/ReactDOMRe.html#type-style\">style</a>) => <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-Style.t", "title": "Style.t", "contents": "t style", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#module-Style", "title": "Style", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#module-Style", "title": "Style", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-style", "title": "style", "contents": "style ", "rendered": "<h4 class='item'>type style</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-reactDOMProps", "title": "reactDOMProps", "contents": "reactDOMProps ", "rendered": "<h4 class='item'>type reactDOMProps</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-hydrateToElementWithId", "title": "hydrateToElementWithId", "contents": "hydrateToElementWithId reactElement string unit  ", "rendered": "<h4 class='item'>let hydrateToElementWithId = (<a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>, string) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-hydrateToElementWithClassName", "title": "hydrateToElementWithClassName", "contents": "hydrateToElementWithClassName reactElement string unit  ", "rendered": "<h4 class='item'>let hydrateToElementWithClassName = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>,\n    string\n) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-renderToElementWithId", "title": "renderToElementWithId", "contents": "renderToElementWithId reactElement string unit  ", "rendered": "<h4 class='item'>let renderToElementWithId = (<a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>, string) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-renderToElementWithClassName", "title": "renderToElementWithClassName", "contents": "renderToElementWithClassName reactElement string unit  ", "rendered": "<h4 class='item'>let renderToElementWithClassName = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>,\n    string\n) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html", "title": "ReactDOMRe", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html", "title": "ReactDOMRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#ReactDOMRe", "title": "ReactDOMRe", "contents": "", "rendered": "", "breadcrumb": "ReactDOMRe"}]