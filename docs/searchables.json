[{"href": "./what-and-why.html", "title": "what-and-why", "contents": "It is often said that writing ReactJS code feels like &quot;just using JavaScript&quot;. The same applies to ReasonReact, but we push it further; writing routing, data management, component composition and components themselves feel like &quot;just using Reason&quot;.", "rendered": "It is often said that writing ReactJS code feels like &quot;just using JavaScript&quot;. The same applies to ReasonReact, but we push it further; writing routing, data management, component composition and components themselves feel like &quot;just using Reason&quot;.", "breadcrumb": "what-and-why"},
{"href": "./what-and-why.html", "title": "what-and-why", "contents": "By leveraging the latter&#39;s great type system, expressive language features and smooth interoperability with JS, ReasonReact packs ReactJS&#39; features into an API that is:", "rendered": "By leveraging the latter&#39;s great type system, expressive language features and smooth interoperability with JS, ReasonReact packs ReactJS&#39; features into an API that is:", "breadcrumb": "what-and-why"},
{"href": "./what-and-why.html", "title": "what-and-why", "contents": "ReasonReact is a safer, simpler way to build React components, in Reason.", "rendered": "ReasonReact is a safer, simpler way to build <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">React</a> components, in <a href=\"http://reasonml.github.io/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason</a>.", "breadcrumb": "what-and-why"},
{"href": "./what-and-why.html#title--What--amp--Why", "title": "title: What &amp; Why", "contents": "", "rendered": "", "breadcrumb": "what-and-why"},
{"href": "./what-and-why.html", "title": "what-and-why", "contents": "", "rendered": "<hr/>", "breadcrumb": "what-and-why"},
{"href": "./ternary-shortcut.html", "title": "ternary-shortcut", "contents": "ReactJS allows the pattern showButton &amp;&amp; &lt;Button /&gt;. While in this specific case, it&#39;s slightly shorter, in general, try not to do this in JS. In ReasonReact, you need to use showButton ? &lt;Button /&gt; : ReasonReact.nullElement.", "rendered": "ReactJS allows the pattern <code>showButton &amp;&amp; &lt;Button /&gt;</code>. While in this specific case, it&#39;s slightly shorter, in general, try not to do this in JS. In ReasonReact, you need to use <code>showButton ? &lt;Button /&gt; : ReasonReact.nullElement</code>.", "breadcrumb": "ternary-shortcut"},
{"href": "./ternary-shortcut.html#title--Ternary-Shortcut", "title": "title: Ternary Shortcut", "contents": "", "rendered": "", "breadcrumb": "ternary-shortcut"},
{"href": "./ternary-shortcut.html", "title": "ternary-shortcut", "contents": "", "rendered": "<hr/>", "breadcrumb": "ternary-shortcut"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "Note: this is an interop helper. This isn&#39;t meant to be used as a shiny first-class feature for e.g. adding more flux stores into your app (for that purpose, please use our local reducer). Every time you use subscriptions, consider it as a simple, pragmatic and performant way to talk to the existing world.", "rendered": "<strong>Note</strong>: this is an <strong>interop helper</strong>. This isn&#39;t meant to be used as a shiny first-class feature for e.g. adding more flux stores into your app (for that purpose, please use our <a href=\"state-actions-reducer.md#actions-reducer\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">local reducer</a>). Every time you use <code>subscriptions</code>, consider it as a simple, pragmatic and performant way to talk to the existing world.", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "Note: subscriptions is called once, after the component is mounted. It&#39;s not re-evaluated every time the component updates.", "rendered": "<strong>Note</strong>: <code>subscriptions</code> is called <strong>once</strong>, after the component is mounted. It&#39;s not re-evaluated every time the component updates.", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "Now you won&#39;t ever forget to clear your timer!", "rendered": "Now you won&#39;t ever forget to clear your timer!", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"Todo\");\n\nlet make = (_children) => {\n  ...component,\n  subscriptions: (self) => [\n    Sub(\n      () => Js.Global.setInterval(() => Js.log(\"hello!\"), 1000),\n      Js.Global.clearInterval\n    )\n  ],\n  render: ...\n}", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"Todo\");\n\nlet make = (_children) => {\n  ...component,\n  subscriptions: (self) => [\n    Sub(\n      () => Js.Global.setInterval(() => Js.log(\"hello!\"), 1000),\n      Js.Global.clearInterval\n    )\n  ],\n  render: ...\n}</code></pre>", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "Here&#39;s the previous example rewritten:", "rendered": "Here&#39;s the previous example rewritten:", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "subscription itself is the type Sub(unit =&gt; &#39;token, &#39;token =&gt; unit). In plain words, it means that it:", "rendered": "<code>subscription</code> itself is the type <code>Sub(unit =&gt; &#39;token, &#39;token =&gt; unit)</code>. In plain words, it means that it:", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "To solve the above problems and to codify a good practice, ReasonReact provides a helper field in the component spec, called subscriptions. It asks for a callback of type self =&gt; list(subscription).", "rendered": "To solve the above problems and to codify a good practice, ReasonReact provides a helper field in the component spec, called <code>subscriptions</code>. It asks for a callback of type <code>self =&gt; list(subscription)</code>.", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "For the last point, go search your codebase and see how many setInterval you have compared to the amount of clearInterval! We bet the ratio isn&#39;t 1 =). Likewise for addEventListener vs removeEventListener.", "rendered": "For the last point, go search your codebase and see how many <code>setInterval</code> you have compared to the amount of <code>clearInterval</code>! We bet the ratio isn&#39;t 1 =). Likewise for <code>addEventListener</code> vs <code>removeEventListener</code>.", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "Notice a few things:", "rendered": "Notice a few things:", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "code block", "contents": "type state = {\n  timerId: ref(option(Js.Global.intervalId))\n};\n\nlet component = ReasonReact.reducerComponent(\"Todo\");\n\nlet make = (_children) => {\n  ...component,\n  initialState: () => {timerId: ref(None)},\n  didMount: (self) => {\n    self.state.timerId := Some(Js.Global.setInterval(() => Js.log(\"hello!\"), 1000));\n    ReasonReact.NoUpdate\n  },\n  willUnmount: (self) => {\n    switch (self.state.timerId^) {\n    | Some(id) => Js.Global.clearInterval(id);\n    | None => ()\n    }\n  },\n  render: ...\n};", "rendered": "<pre><code>type state = {\n  timerId: ref(option(Js.Global.intervalId))\n};\n\nlet component = ReasonReact.reducerComponent(\"Todo\");\n\nlet make = (_children) => {\n  ...component,\n  initialState: () => {timerId: ref(None)},\n  didMount: (self) => {\n    self.state.timerId := Some(Js.Global.setInterval(() => Js.log(\"hello!\"), 1000));\n    ReasonReact.NoUpdate\n  },\n  willUnmount: (self) => {\n    switch (self.state.timerId^) {\n    | Some(id) => Js.Global.clearInterval(id);\n    | None => ()\n    }\n  },\n  render: ...\n};</code></pre>", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "For example, Here&#39;s what you&#39;re probably doing currently, for setting up a timer event:", "rendered": "For example, Here&#39;s what you&#39;re probably doing currently, for setting up a timer event:", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "In a large, heterogeneous app, you might often have legacy or interop data sources that come from outside of the React/ReasonReact tree, or a timer, or some browser event handling. You&#39;d listen and react to these changes by, say, updating the state.", "rendered": "In a large, heterogeneous app, you might often have legacy or interop data sources that come from outside of the React/ReasonReact tree, or a timer, or some browser event handling. You&#39;d listen and react to these changes by, say, updating the state.", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html#title--Subscriptions-Helper", "title": "title: Subscriptions Helper", "contents": "", "rendered": "", "breadcrumb": "subscriptions-helper"},
{"href": "./subscriptions-helper.html", "title": "subscriptions-helper", "contents": "", "rendered": "<hr/>", "breadcrumb": "subscriptions-helper"},
{"href": "./style.html", "title": "code block", "contents": "let myStyle = ReactDOMRe.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ());\nlet newStyle = ReactDOMRe.Style.unsafeAddProp(myStyle, \"width\", \"10px\");", "rendered": "<pre><code>let myStyle = ReactDOMRe.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ());\nlet newStyle = ReactDOMRe.Style.unsafeAddProp(myStyle, \"width\", \"10px\");</code></pre>", "breadcrumb": "style"},
{"href": "./style.html", "title": "style", "contents": "The above Style.make API will safely type check every style field! However, we might have missed some more esoteric fields. If that&#39;s the case, the type system will tell you that the field you&#39;re trying to add doesn&#39;t exist. To remediate this, we&#39;re exposing a ReactDOMRe.Style.unsafeAddProp to dangerously add a field to a style:", "rendered": "The above <code>Style.make</code> API will safely type check every style field! However, we might have missed some more esoteric fields. If that&#39;s the case, the type system will tell you that the field you&#39;re trying to add doesn&#39;t exist. To remediate this, we&#39;re exposing a <code>ReactDOMRe.Style.unsafeAddProp</code> to dangerously add a field to a style:", "breadcrumb": "style"},
{"href": "./style.html#Escape-Hatch--unsafeAddProp", "title": "Escape Hatch: unsafeAddProp", "contents": "", "rendered": "", "breadcrumb": "style"},
{"href": "./style.html", "title": "style", "contents": "It&#39;s a labeled (typed!) function call that maps to the familiar style object {color: &#39;#444444&#39;, fontSize: &#39;68px&#39;}. Note that make returns an opaque ReactDOMRe.style type that you can&#39;t read into. We also expose a ReactDOMRe.Style.combine that takes in two styles and combine them.", "rendered": "It&#39;s a labeled (typed!) function call that maps to the familiar style object <code>{color: &#39;#444444&#39;, fontSize: &#39;68px&#39;}</code>. <strong>Note</strong> that <code>make</code> returns an opaque <code>ReactDOMRe.style</code> type that you can&#39;t read into. We also expose a <code>ReactDOMRe.Style.combine</code> that takes in two <code>style</code>s and combine them.", "breadcrumb": "style"},
{"href": "./style.html", "title": "code block", "contents": "<div style=(\n  ReactDOMRe.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ())\n)/>", "rendered": "<pre><code><div style=(\n  ReactDOMRe.Style.make(~color=\"#444444\", ~fontSize=\"68px\", ())\n)/></code></pre>", "breadcrumb": "style"},
{"href": "./style.html", "title": "style", "contents": "Since CSS-in-JS is all the rage right now, we&#39;ll recommend our official pick soon. In the meantime, for inline styles, there&#39;s the ReactDOMRe.Style.make API:", "rendered": "Since CSS-in-JS is all the rage right now, we&#39;ll recommend our official pick soon. In the meantime, for inline styles, there&#39;s the <code>ReactDOMRe.Style.make</code> API:", "breadcrumb": "style"},
{"href": "./style.html#title--Style", "title": "title: Style", "contents": "", "rendered": "", "breadcrumb": "style"},
{"href": "./style.html", "title": "style", "contents": "", "rendered": "<hr/>", "breadcrumb": "style"},
{"href": "./state-actions-reducer.html", "title": "code block", "contents": "Js.Global.setInterval(() => self.send(Tick), 1000)", "rendered": "<pre><code>Js.Global.setInterval(() => self.send(Tick), 1000)</code></pre>", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "In ReasonReact, you&#39;d do something similar:", "rendered": "In ReasonReact, you&#39;d do something similar:", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "code block", "contents": "setInterval(() => this.setState(...), 1000);", "rendered": "<pre><code>setInterval(() => this.setState(...), 1000);</code></pre>", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "In ReactJS, you could use setState inside a callback, like so:", "rendered": "In ReactJS, you could use <code>setState</code> inside a callback, like so:", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#Async-State-Setting", "title": "Async State Setting", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Cram as much as possible into reducer. Keep your actual callback handlers (the self.send(Foo) part) dumb and small. This makes all your state updates &amp; side-effects (which itself should mostly only be inside ReasonReact.SideEffects and ReasonReact.UpdateWithSideEffects) much easier to scan through. Also more ReactJS fiber async-mode resilient.", "rendered": "Cram as much as possible into <code>reducer</code>. Keep your actual callback handlers (the <code>self.send(Foo)</code> part) dumb and small. This makes all your state updates &amp; side-effects (which itself should mostly only be inside <code>ReasonReact.SideEffects</code> and <code>ReasonReact.UpdateWithSideEffects</code>) much easier to scan through. Also more ReactJS fiber async-mode resilient.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#Tip", "title": "Tip", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Please read through all these points, if you want to fully take advantage of reducer and avoid future ReactJS Fiber race condition problems.", "rendered": "<strong>Please read through all these points</strong>, if you want to fully take advantage of <code>reducer</code> and avoid future ReactJS Fiber race condition problems.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#Important-Notes", "title": "Important Notes", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "If you&#39;re a power user, there&#39;s also SilentUpdate and SilentUpdateWithSideEffects. See ReasonReact.rei to see what they do. Don&#39;t use them if you&#39;re trying to update a ref/timer/subscription/any other instance variable.", "rendered": "<em>If you&#39;re a power user, there&#39;s also <code>SilentUpdate</code> and <code>SilentUpdateWithSideEffects</code>. See <a href=\"https://github.com/reasonml/reason-react/blob/master/src/ReasonReact.rei\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>ReasonReact.rei</code></a> to see what they do. Don&#39;t use them if you&#39;re trying to update a ref/timer/subscription/any other instance variable</em>.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Notice the return value of reducer? The ReasonReact.Update part. Instead of returning a bare new state, we ask you to return the state wrapped in this &quot;update&quot; variant. Here are its possible values:", "rendered": "Notice the return value of <code>reducer</code>? The <code>ReasonReact.Update</code> part. Instead of returning a bare new state, we ask you to return the state wrapped in this &quot;update&quot; variant. Here are its possible values:", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#State-Update-Through-Reducer", "title": "State Update Through Reducer", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Note: just like for self.handle, sometimes you might be forwarding send to some helper functions. Pass the whole self instead and annotate it. This avoids a complex self record type behavior. See Record Field send/handle Not Found.", "rendered": "<strong>Note</strong>: just like for <code>self.handle</code>, sometimes you might be forwarding <code>send</code> to some helper functions. Pass the whole <code>self</code> instead and <strong>annotate it</strong>. This avoids a complex <code>self</code> record type behavior. See <a href=\"record-field-send-handle-not-found.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Record Field <code>send</code>/<code>handle</code> Not Found</a>.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "So, when a click on the dialog is triggered, we &quot;send&quot; the Click action to the reducer, which handles the Click case by returning the new state that increment a counter. ReasonReact takes the state and updates the component.", "rendered": "So, when a click on the dialog is triggered, we &quot;send&quot; the <code>Click</code> action to the reducer, which handles the <code>Click</code> case by returning the new state that increment a counter. ReasonReact takes the state and updates the component.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "A few things:", "rendered": "A few things:", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Note: if you ever see mentions of self.reduce, this is the old API. The new API is called self.send. The old API&#39;s docs are here.", "rendered": "<strong>Note</strong>: if you ever see mentions of <code>self.reduce</code>, this is the old API. The new API is called <code>self.send</code>. The old API&#39;s docs are <a href=\"https://github.com/reasonml/reason-react/blob/e17fcb5d27a2b7fb2cfdc09d46f0b4cf765e50e4/docs/state-actions-reducer.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "In ReasonReact, you&#39;d gather all these state-setting handlers into a single place, the component&#39;s reducer! Please refer to the first snippet of code on this page.", "rendered": "In ReasonReact, you&#39;d gather all these state-setting handlers into a single place, the component&#39;s <code>reducer</code>! <strong>Please refer to the first snippet of code on this page</strong>.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "code block", "contents": "{\n  /* ... other fields */\n  handleClick: function() {\n    this.setState({count: this.state.count + 1});\n  },\n  handleSubmit: function() {\n    this.setState(...);\n  },\n  render: function() {\n    return (\n      <MyForm\n        onClick={this.handleClick}\n        onSubmit={this.handleSubmit} />\n    );\n  }\n}", "rendered": "<pre><code>{\n  /* ... other fields */\n  handleClick: function() {\n    this.setState({count: this.state.count + 1});\n  },\n  handleSubmit: function() {\n    this.setState(...);\n  },\n  render: function() {\n    return (\n      <MyForm\n        onClick={this.handleClick}\n        onSubmit={this.handleSubmit} />\n    );\n  }\n}</code></pre>", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "In ReactJS, you&#39;d update the state inside a callback handler, e.g.", "rendered": "In ReactJS, you&#39;d update the state inside a callback handler, e.g.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#Actions--amp--Reducer", "title": "Actions &amp; Reducer", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Since the props are just the arguments on make, feel free to read into them to initialize your state based on them.", "rendered": "Since the props are just the arguments on <code>make</code>, feel free to read into them to initialize your state based on them.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "code block", "contents": "type state = {count: int, show: bool};\n\nlet component = ReasonReact.reducerComponent(\"Example\");\n\nlet make = (~onClick, _children) => {\n  ...component,\n  initialState: () => {count: 0, show: true},\n  /* ... other fields */\n};\n\n", "rendered": "<pre><code>type state = {count: int, show: bool};\n\nlet component = ReasonReact.reducerComponent(\"Example\");\n\nlet make = (~onClick, _children) => {\n  ...component,\n  initialState: () => {count: 0, show: true},\n  /* ... other fields */\n};\n\n</code></pre>", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "ReactJS&#39; getInitialState is called initialState in ReasonReact. It takes unit and returns the state type. The state type could be anything! An int, a string, a ref or the common record type, which you should declare right before the reducerComponent call:", "rendered": "ReactJS&#39; <code>getInitialState</code> is called <code>initialState</code> in ReasonReact. It takes <code>unit</code> and returns the state type. The state type could be anything! An int, a string, a ref or the common record type, which you should declare <strong>right before the <code>reducerComponent</code> call</strong>:", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#initialState", "title": "initialState", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "code block", "contents": "/* State declaration */\ntype state = {\n  count: int,\n  show: bool,\n};\n\n/* Action declaration */\ntype action =\n  | Click\n  | Toggle;\n\n/* Component template declaration.\n   Needs to be **after** state and action declarations! */\nlet component = ReasonReact.reducerComponent(\"Example\");\n\n/* greeting and children are props. `children` isn't used, therefore ignored.\n   We ignore it by prepending it with an underscore */\nlet make = (~greeting, _children) => {\n  /* spread the other default fields of component here and override a few */\n  ...component,\n\n  initialState: () => {count: 0, show: true},\n\n  /* State transitions */\n  reducer: (action, state) =>\n    switch (action) {\n    | Click => ReasonReact.Update({...state, count: state.count + 1})\n    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n    },\n\n  render: self => {\n    let message =\n      \"You've clicked this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n    <div>\n      <button onClick=(_event => self.send(Click))>\n        (ReasonReact.stringToElement(message))\n      </button>\n      <button onClick=(_event => self.send(Toggle))>\n        (ReasonReact.stringToElement(\"Toggle greeting\"))\n      </button>\n      (\n        self.state.show ?\n          ReasonReact.stringToElement(greeting) : ReasonReact.nullElement\n      )\n    </div>;\n  },\n};", "rendered": "<pre><code>/* State declaration */\ntype state = {\n  count: int,\n  show: bool,\n};\n\n/* Action declaration */\ntype action =\n  | Click\n  | Toggle;\n\n/* Component template declaration.\n   Needs to be **after** state and action declarations! */\nlet component = ReasonReact.reducerComponent(\"Example\");\n\n/* greeting and children are props. `children` isn't used, therefore ignored.\n   We ignore it by prepending it with an underscore */\nlet make = (~greeting, _children) => {\n  /* spread the other default fields of component here and override a few */\n  ...component,\n\n  initialState: () => {count: 0, show: true},\n\n  /* State transitions */\n  reducer: (action, state) =>\n    switch (action) {\n    | Click => ReasonReact.Update({...state, count: state.count + 1})\n    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n    },\n\n  render: self => {\n    let message =\n      \"You've clicked this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n    <div>\n      <button onClick=(_event => self.send(Click))>\n        (ReasonReact.stringToElement(message))\n      </button>\n      <button onClick=(_event => self.send(Toggle))>\n        (ReasonReact.stringToElement(\"Toggle greeting\"))\n      </button>\n      (\n        self.state.show ?\n          ReasonReact.stringToElement(greeting) : ReasonReact.nullElement\n      )\n    </div>;\n  },\n};</code></pre>", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Here&#39;s a complete, working, stateful ReasonReact component. We&#39;ll refer to it later on.", "rendered": "Here&#39;s a complete, working, stateful ReasonReact component. We&#39;ll refer to it later on.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "To declare a stateful ReasonReact component, instead of ReasonReact.statelessComponent(&quot;MyComponentName&quot;), use ReasonReact.reducerComponent(&quot;MyComponentName&quot;).", "rendered": "To declare a stateful ReasonReact component, instead of <code>ReasonReact.statelessComponent(&quot;MyComponentName&quot;)</code>, use <code>ReasonReact.reducerComponent(&quot;MyComponentName&quot;)</code>.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "ReasonReact stateful components are like ReactJS stateful components, except with the concept of &quot;reducer&quot; (like Redux) built in. If that word doesn&#39;t mean anything to you, just think of it as a state machine. If that word doesn&#39;t mean anything to you, just think: &quot;Woah this is great&quot;.", "rendered": "ReasonReact stateful components are like ReactJS stateful components, except with the concept of &quot;reducer&quot; (like <a href=\"http://redux.js.org\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Redux</a>) built in. If that word doesn&#39;t mean anything to you, just think of it as a state machine. If <em>that</em> word doesn&#39;t mean anything to you, just think: &quot;Woah this is great&quot;.", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "Finally, we&#39;re getting onto stateful components!", "rendered": "Finally, we&#39;re getting onto stateful components!", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html#title--State--Actions--amp--Reducer", "title": "title: State, Actions &amp; Reducer", "contents": "", "rendered": "", "breadcrumb": "state-actions-reducer"},
{"href": "./state-actions-reducer.html", "title": "state-actions-reducer", "contents": "", "rendered": "<hr/>", "breadcrumb": "state-actions-reducer"},
{"href": "./simple.html", "title": "code block", "contents": "ReactDOMRe.renderToElementWithId(ReasonReact.element(make(~message=\"Hello!\", [||])), \"index\");", "rendered": "<pre><code>ReactDOMRe.renderToElementWithId(ReasonReact.element(make(~message=\"Hello!\", [||])), \"index\");</code></pre>", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "simple", "contents": "In the same file, you&#39;d do:", "rendered": "In the same file, you&#39;d do:", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "code block", "contents": "ReactDOMRe.renderToElementWithId(<Page message=\"Hello!\" />, \"index\");", "rendered": "<pre><code>ReactDOMRe.renderToElementWithId(<Page message=\"Hello!\" />, \"index\");</code></pre>", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "simple", "contents": "Usage in another file:", "rendered": "Usage in another file:", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"Page\");\n\nlet handleClick = (_event, _self) => Js.log(\"clicked!\");\n\nlet make = (~message, _children) => {\n  ...component,\n  render: self =>\n    <div onClick={self.handle(handleClick)}>{ReasonReact.stringToElement(message)}</div>\n};", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"Page\");\n\nlet handleClick = (_event, _self) => Js.log(\"clicked!\");\n\nlet make = (~message, _children) => {\n  ...component,\n  render: self =>\n    <div onClick={self.handle(handleClick)}>{ReasonReact.stringToElement(message)}</div>\n};</code></pre>", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "simple", "contents": "See https://github.com/reasonml-community/reason-react-example for examples you can clone and run. This page copy pastes a few from there for ease of reading.", "rendered": "See https://github.com/reasonml-community/reason-react-example for examples you can clone and run. This page copy pastes a few from there for ease of reading.", "breadcrumb": "simple"},
{"href": "./simple.html#title--Simple", "title": "title: Simple", "contents": "", "rendered": "", "breadcrumb": "simple"},
{"href": "./simple.html", "title": "simple", "contents": "", "rendered": "<hr/>", "breadcrumb": "simple"},
{"href": "./send-handle-callbacks-having-incompatible-types.html", "title": "send-handle-callbacks-having-incompatible-types", "contents": "You&#39;ve probably passed self.send to a helper function that uses this send reference twice. For complex reasons this doesn&#39;t type; you&#39;d have to pass in the whole self to the helper.", "rendered": "You&#39;ve probably passed <code>self.send</code> to a helper function that uses this <code>send</code> reference twice. For complex reasons this doesn&#39;t type; you&#39;d have to pass in the whole <code>self</code> to the helper.", "breadcrumb": "send-handle-callbacks-having-incompatible-types"},
{"href": "./send-handle-callbacks-having-incompatible-types.html#title--send-handle-callbacks-having-Incompatible-Types", "title": "title: send/handle callbacks having Incompatible Types", "contents": "", "rendered": "", "breadcrumb": "send-handle-callbacks-having-incompatible-types"},
{"href": "./send-handle-callbacks-having-incompatible-types.html", "title": "send-handle-callbacks-having-incompatible-types", "contents": "", "rendered": "<hr/>", "breadcrumb": "send-handle-callbacks-having-incompatible-types"},
{"href": "./router.html", "title": "router", "contents": "Performance-wise, a JavaScript-like API tend to use a JS object of route string -&gt; callback. We eschewed that in favor of pattern-matching, since the latter in Reason does not allocate memory, and is compiled to a fast jump table in C++ (through the JS JIT). In fact, the only allocation in the router matching is the creation of the url record!", "rendered": "Performance-wise, a JavaScript-like API tend to use a JS object of route string -&gt; callback. We eschewed that in favor of pattern-matching, since the latter in Reason does not allocate memory, and is compiled to a fast jump table in C++ (through the JS JIT). In fact, the only allocation in the router matching is the creation of the <code>url</code> record!", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "The API also doesn&#39;t dictate whether matching on a route should return a component, a state update, or a side-effect. Flexible enough to slip into existing apps.", "rendered": "The API also doesn&#39;t dictate whether matching on a route should return a component, a state update, or a side-effect. Flexible enough to slip into existing apps.", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "We always strive to lower the performance and learning overhead in ReasonReact, and our router design&#39;s no different. The entire implementation, barring browser features detection, is around 20 lines. The design might seem obvious in retrospect, but to arrived at it, we had to dig back into ReactJS internals &amp; future proposals to make sure we understood the state update mechanisms, the future context proposal, lifecycle ordering, etc. and reject some bad API designs along the way. It&#39;s nice to arrive at such an obvious solution!", "rendered": "We always strive to lower the performance and learning overhead in ReasonReact, and our router design&#39;s no different. The entire implementation, barring browser features detection, is around 20 lines. The design might seem obvious in retrospect, but to arrived at it, we had to dig back into ReactJS internals &amp; future proposals to make sure we understood the state update mechanisms, the future context proposal, lifecycle ordering, etc. and reject some bad API designs along the way. It&#39;s nice to arrive at such an obvious solution!", "breadcrumb": "router"},
{"href": "./router.html#Design-Decisions", "title": "Design Decisions", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "Note: because of browser limitations, changing the URL through JavaScript (aka pushState) cannot be detected. The solution is to change the URL then fire a &quot;popState&quot; event. This is what Router.push does, and what the event watchUrl listens to. So if, for whatever reason (e.g. incremental migration), you want to update the URL outside of Router.push, just do window.dispatchEvent(new Event(&#39;popState&#39;)).", "rendered": "<strong>Note</strong>: because of browser limitations, changing the URL through JavaScript (aka <code>pushState</code>) <strong>cannot</strong> be detected. The solution is to change the URL then fire a <code>&quot;popState&quot;</code> event. This is what <code>Router.push</code> does, and what the event <code>watchUrl</code> listens to. So if, for whatever reason (e.g. incremental migration), you want to update the URL outside of <code>Router.push</code>, just do <code>window.dispatchEvent(new Event(&#39;popState&#39;))</code>.", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "We might provide better facilities for typed routing + payload carrying in the future!", "rendered": "We might provide better facilities for typed routing + payload carrying in the future!", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "From anywhere in your app, just call e.g. ReasonReact.Router.push(&quot;/books/10/edit#validated&quot;). This will trigger a URL change (without a page refresh) and watchUrl&#39;s callback will be called again.", "rendered": "From anywhere in your app, just call e.g. <code>ReasonReact.Router.push(&quot;/books/10/edit#validated&quot;)</code>. This will trigger a URL change (without a page refresh) and <code>watchUrl</code>&#39;s callback will be called again.", "breadcrumb": "router"},
{"href": "./router.html#Push-a-New-Route", "title": "Push a New Route", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "Note: the reason why we label it as &quot;dangerous&quot; is to remind you not to read this url in any arbitrary component&#39;s e.g. render, since that information might be out of date if said component doesn&#39;t also contain a watchUrl subscription that re-renders the component when the URL changes. Aka, please only use dangerouslyGetInitialUrl alongside watchUrl.", "rendered": "<strong>Note</strong>: the reason why we label it as &quot;dangerous&quot; is to remind you <strong>not</strong> to read this <code>url</code> in any arbitrary component&#39;s e.g. <code>render</code>, since that information might be out of date if said component doesn&#39;t also contain a <code>watchUrl</code> subscription that re-renders the component when the URL changes. Aka, please only use <code>dangerouslyGetInitialUrl</code> alongside <code>watchUrl</code>.", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "In other words, you&#39;d like to read from the url record once at the beginning of your app logic. We expose dangerouslyGetInitialUrl() for this purpose.", "rendered": "In other words, you&#39;d like to read from the <code>url</code> record once at the beginning of your app logic. We expose <code>dangerouslyGetInitialUrl()</code> for this purpose.", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "In one specific occasion, you might want to take hold of a url record outside of watchUrl. For example, if you&#39;ve put watchUrl inside a component&#39;s didMount so that a URL change triggers a component state change, you might also want the initial state to be dictated by the URL.", "rendered": "In one specific occasion, you might want to take hold of a <code>url</code> record <em>outside</em> of <code>watchUrl</code>. For example, if you&#39;ve put <code>watchUrl</code> inside a component&#39;s <code>didMount</code> so that a URL change triggers a component state change, you might also want the initial state to be dictated by the URL.", "breadcrumb": "router"},
{"href": "./router.html#Directly-Get-a-Route", "title": "Directly Get a Route", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "code block", "contents": "let component = ReasonReact.reducerComponent(\"TodoApp\");\n\nlet make = (_children) => {\n  ...component,\n  reducer: (action, state) =>\n    switch (action) {\n    /* router actions */\n    | ShowAll => ReasonReact.Update({...state, nowShowing: AllTodos})\n    | ShowActive => ...\n    /* todo actions */\n    | ChangeTodo(text) => ...\n    },\n  subscriptions: (self) => [\n    Sub(\n      () =>\n        ReasonReact.Router.watchUrl(\n          url => {\n            switch (url.hash, MyAppStatus.isUserLoggedIn) {\n            | (\"active\", _) => self.send(ShowActive)\n            | (\"completed\", _) => self.send(ShowCompleted)\n            | (\"shared\", true) => self.send(ShowShared)\n            | (\"shared\", false) when isSpecialUser => ... /* handle this state */\n            | (\"shared\", false) => ... /* handle this state */\n            | _ => self.send(ShowAll)\n            }\n          }\n        ),\n      ReasonReact.Router.unwatchUrl\n    )\n  ],\n  render: ...\n}", "rendered": "<pre><code>let component = ReasonReact.reducerComponent(\"TodoApp\");\n\nlet make = (_children) => {\n  ...component,\n  reducer: (action, state) =>\n    switch (action) {\n    /* router actions */\n    | ShowAll => ReasonReact.Update({...state, nowShowing: AllTodos})\n    | ShowActive => ...\n    /* todo actions */\n    | ChangeTodo(text) => ...\n    },\n  subscriptions: (self) => [\n    Sub(\n      () =>\n        ReasonReact.Router.watchUrl(\n          url => {\n            switch (url.hash, MyAppStatus.isUserLoggedIn) {\n            | (\"active\", _) => self.send(ShowActive)\n            | (\"completed\", _) => self.send(ShowCompleted)\n            | (\"shared\", true) => self.send(ShowShared)\n            | (\"shared\", false) when isSpecialUser => ... /* handle this state */\n            | (\"shared\", false) => ... /* handle this state */\n            | _ => self.send(ShowAll)\n            }\n          }\n        ),\n      ReasonReact.Router.unwatchUrl\n    )\n  ],\n  render: ...\n}</code></pre>", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "Notice that this is just normal pattern matching. You can combine it with other features, such as tuple + ReasonReact features like subscriptions and reducer:", "rendered": "Notice that this is just normal <a href=\"https://reasonml.github.io/docs/en/pattern-matching.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">pattern matching</a>. You can combine it with other features, such as tuple + ReasonReact features like <a href=\"subscriptions-helper.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">subscriptions</a> and reducer:", "breadcrumb": "router"},
{"href": "./router.html#Tips--amp--Tricks", "title": "Tips &amp; Tricks", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "So you can match a path, match a subset of a path, defer part of a matching to a nested logic, etc.", "rendered": "So you can match a path, match a subset of a path, defer part of a matching to a nested logic, etc.", "breadcrumb": "router"},
{"href": "./router.html", "title": "code block", "contents": "let watcherID = ReasonReact.Router.watchUrl(url => {\n  switch (url.path) {\n  | [\"book\", id, \"edit\"] => handleBookEdit(id)\n  | [\"book\", id] => getBook(id)\n  | [\"book\", id, _] => noSuchBookOperation()\n  | [] => showMainPage()\n  | [\"shop\"] | [\"shop\", \"index\"] => showShoppingPage()\n  | [\"shop\", ...rest] =>\n     /* e.g. \"shop/cart/10\", but let \"cart/10\" be handled by another function */\n    nestedMatch(rest)\n  | _ => showNotFoundPage()\n  }\n});\n\n/* some time later */\nReasonReact.Router.unwatchUrl(watcherID);", "rendered": "<pre><code>let watcherID = ReasonReact.Router.watchUrl(url => {\n  switch (url.path) {\n  | [\"book\", id, \"edit\"] => handleBookEdit(id)\n  | [\"book\", id] => getBook(id)\n  | [\"book\", id, _] => noSuchBookOperation()\n  | [] => showMainPage()\n  | [\"shop\"] | [\"shop\", \"index\"] => showShoppingPage()\n  | [\"shop\", ...rest] =>\n     /* e.g. \"shop/cart/10\", but let \"cart/10\" be handled by another function */\n    nestedMatch(rest)\n  | _ => showNotFoundPage()\n  }\n});\n\n/* some time later */\nReasonReact.Router.unwatchUrl(watcherID);</code></pre>", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "At this point, you can simply pattern match your way to glory!", "rendered": "At this point, you can simply pattern match your way to glory!", "breadcrumb": "router"},
{"href": "./router.html", "title": "code block", "contents": "{\n  path: [\"book\", \"10\", \"edit\"],\n  hash: \"author\",\n  search: \"name=Jane\"\n}", "rendered": "<pre><code>{\n  path: [\"book\", \"10\", \"edit\"],\n  hash: \"author\",\n  search: \"name=Jane\"\n}</code></pre>", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "So the url www.hello.com/book/10/edit?name=Jane#author is given back as:", "rendered": "So the url <code>www.hello.com/book/10/edit?name=Jane#author</code> is given back as:", "breadcrumb": "router"},
{"href": "./router.html", "title": "code block", "contents": "type url = {\n  /* path takes window.location.pathname, like \"/book/title/edit\" and turns it into `[\"book\", \"title\", \"edit\"]` */\n  path: list(string),\n  /* the url's hash, if any. The # symbol is stripped out for you */\n  hash: string,\n  /* the url's query params, if any. The ? symbol is stripped out for you */\n  search: string\n};", "rendered": "<pre><code>type url = {\n  /* path takes window.location.pathname, like \"/book/title/edit\" and turns it into `[\"book\", \"title\", \"edit\"]` */\n  path: list(string),\n  /* the url's hash, if any. The # symbol is stripped out for you */\n  hash: string,\n  /* the url's query params, if any. The ? symbol is stripped out for you */\n  search: string\n};</code></pre>", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "There&#39;s no API! watchUrl gives you back a url record of the following shape:", "rendered": "<strong>There&#39;s no API</strong>! <code>watchUrl</code> gives you back a <code>url</code> record of the following shape:", "breadcrumb": "router"},
{"href": "./router.html#Match-a-Route", "title": "Match a Route", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "Here&#39;s the documented public interface, repeated here:", "rendered": "<a href=\"https://github.com/reasonml/reason-react/blob/9e9e40ea4c7e8d55e56cba47a4d0188c26d0791e/src/ReasonReact.rei#L248-L276\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Here&#39;s the documented public interface</a>, repeated here:", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "ReasonReact comes with a router! We&#39;ve leveraged the language and library features in order to create a router that&#39;s:", "rendered": "ReasonReact comes with a router! We&#39;ve leveraged the language and library features in order to create a router that&#39;s:", "breadcrumb": "router"},
{"href": "./router.html#title--Router", "title": "title: Router", "contents": "", "rendered": "", "breadcrumb": "router"},
{"href": "./router.html", "title": "router", "contents": "", "rendered": "<hr/>", "breadcrumb": "router"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Convert over the ReactJS components! With ReasonReact&#39;s interop, you can actually keep your JS component library&#39;s API stable while providing a better ReasonReact API.", "rendered": "Convert over the ReactJS components! With ReasonReact&#39;s <a href=\"./docs/./interop.md\" title=\"\">interop</a>, you can actually keep your JS component library&#39;s API stable while providing a better ReasonReact API.", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Suggest better error messages for ReasonReact.", "rendered": "<a href=\"https://github.com/reasonml-community/error-message-improvement/issues\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Suggest better error messages for ReasonReact</a>.", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Improve the documentation and website.", "rendered": "Improve the documentation and website.", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Help us translate the docs! Click on the translation symbol on the upper right.", "rendered": "Help us translate the docs! Click on the translation symbol on the upper right.", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Wanna help?", "rendered": "Wanna help?", "breadcrumb": "roadmap"},
{"href": "./roadmap.html#Your-Contribution-Opportunities", "title": "Your Contribution Opportunities", "contents": "", "rendered": "", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "Some future plans are briefly discussed in the repo&#39;s FUTURE.md.", "rendered": "Some future plans are briefly discussed in the repo&#39;s <a href=\"https://github.com/reasonml/reason-react/blob/master/FUTURE.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">FUTURE.md</a>.", "breadcrumb": "roadmap"},
{"href": "./roadmap.html#Reason-Team-TODOs", "title": "Reason Team TODOs", "contents": "", "rendered": "", "breadcrumb": "roadmap"},
{"href": "./roadmap.html#title--Roadmap--amp--Contribution", "title": "title: Roadmap &amp; Contribution", "contents": "", "rendered": "", "breadcrumb": "roadmap"},
{"href": "./roadmap.html", "title": "roadmap", "contents": "", "rendered": "<hr/>", "breadcrumb": "roadmap"},
{"href": "./retained-props.html", "title": "code block", "contents": "type retainedProps = {message: string};\n\nlet component = ReasonReact.statelessComponentWithRetainedProps(\"RetainedPropsExample\");\n\nlet make = (~message, _children) => {\n  ...component,\n  retainedProps: {message: message},\n  didUpdate: ({oldSelf, newSelf}) =>\n    if (oldSelf.retainedProps.message !== newSelf.retainedProps.message) {\n      /* do whatever sneaky imperative things here */\n      Js.log(\"props `message` changed!\")\n    },\n  render: _self => <div>{ReasonReact.stringToElement(message)}</div>\n};", "rendered": "<pre><code>type retainedProps = {message: string};\n\nlet component = ReasonReact.statelessComponentWithRetainedProps(\"RetainedPropsExample\");\n\nlet make = (~message, _children) => {\n  ...component,\n  retainedProps: {message: message},\n  didUpdate: ({oldSelf, newSelf}) =>\n    if (oldSelf.retainedProps.message !== newSelf.retainedProps.message) {\n      /* do whatever sneaky imperative things here */\n      Js.log(\"props `message` changed!\")\n    },\n  render: _self => <div>{ReasonReact.stringToElement(message)}</div>\n};</code></pre>", "breadcrumb": "retained-props"},
{"href": "./retained-props.html", "title": "retained-props", "contents": "Copy a few props into a special field to emulate ReactJS&#39; lifecycle events&#39; prevProps/nextProps functionality.", "rendered": "Copy a few props into a special field to emulate ReactJS&#39; lifecycle events&#39; <code>prevProps</code>/<code>nextProps</code> functionality.", "breadcrumb": "retained-props"},
{"href": "./retained-props.html#title--Retained-Props", "title": "title: Retained Props", "contents": "", "rendered": "", "breadcrumb": "retained-props"},
{"href": "./retained-props.html", "title": "retained-props", "contents": "", "rendered": "<hr/>", "breadcrumb": "retained-props"},
{"href": "./render.html", "title": "render", "contents": "ReasonReact.arrayToElement: Takes an array and converts it to a reactElement.", "rendered": "<code>ReasonReact.arrayToElement</code>: Takes an array and converts it to a <code>reactElement</code>.", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "ReasonReact.stringToElement: Takes a string and converts it to a reactElement. You&#39;d use &lt;div&gt; {ReasonReact.stringToElement(string_of_int(10))} &lt;/div&gt; to display an int.", "rendered": "<code>ReasonReact.stringToElement</code>: Takes a string and converts it to a <code>reactElement</code>. You&#39;d use <code>&lt;div&gt; {ReasonReact.stringToElement(string_of_int(10))} &lt;/div&gt;</code> to display an int.", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "ReasonReact.nullElement: This is your null equivalent for render&#39;s return value. Akin to return null in ReactJS render.", "rendered": "<code>ReasonReact.nullElement</code>: This is your <code>null</code> equivalent for <code>render</code>&#39;s return value. Akin to <code>return null</code> in ReactJS render.", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "Fortunately, we special-case a few special elements of the type ReasonReact.reactElement:", "rendered": "Fortunately, we special-case a few special elements of the type <code>ReasonReact.reactElement</code>:", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "In ReactJS, you can easily do: &lt;div&gt; hello &lt;/div&gt;, &lt;div&gt; 1 &lt;/div&gt;, &lt;div&gt; null &lt;/div&gt;, etc. In Reason, the type system restricts you from passing arbitrary data like so; you can only return ReasonReact.reactElement from render.", "rendered": "In ReactJS, you can easily do: <code>&lt;div&gt; hello &lt;/div&gt;</code>, <code>&lt;div&gt; 1 &lt;/div&gt;</code>, <code>&lt;div&gt; null &lt;/div&gt;</code>, etc. In Reason, the type system restricts you from passing arbitrary data like so; you can only return <code>ReasonReact.reactElement</code> from <code>render</code>.", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "What if you want to return null from a render? Or pass a string to a DOM component like div which only allows ReasonReact.reactElements?", "rendered": "What if you want to return <code>null</code> from a <code>render</code>? Or pass a string to a DOM component like <code>div</code> which only allows <code>ReasonReact.reactElement</code>s?", "breadcrumb": "render"},
{"href": "./render.html", "title": "code block", "contents": "...\n    render: (self) => <div />\n...", "rendered": "<pre><code>...\n    render: (self) => <div />\n...</code></pre>", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "render needs to return a ReasonReact.reactElement: &lt;div /&gt;, &lt;MyComponent /&gt;, etc. Render takes the argument self:", "rendered": "<code>render</code> needs to return a <code>ReasonReact.reactElement</code>: <code>&lt;div /&gt;</code>, <code>&lt;MyComponent /&gt;</code>, etc. Render takes the argument <code>self</code>:", "breadcrumb": "render"},
{"href": "./render.html#title--Render", "title": "title: Render", "contents": "", "rendered": "", "breadcrumb": "render"},
{"href": "./render.html", "title": "render", "contents": "", "rendered": "<hr/>", "breadcrumb": "render"},
{"href": "./record-field-send-handle-not-found.html", "title": "record-field-send-handle-not-found", "contents": "More info here.", "rendered": "More info <a href=\"https://reasonml.github.io/docs/en/record.html#record-needs-an-explicit-definition\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>.", "breadcrumb": "record-field-send-handle-not-found"},
{"href": "./record-field-send-handle-not-found.html", "title": "record-field-send-handle-not-found", "contents": "Do you see a type error related to this? This might mean that you&#39;ve passed self to a helper function of your render, and it used it like so: &lt;div onClick={_e =&gt; self.send(Click)} /&gt;. This is because the record can&#39;t be found in the scope of the file. Just annotate it: &lt;div onClick={_e =&gt; self.ReasonReact.send(Click)} /&gt;.", "rendered": "Do you see a type error related to this? This might mean that you&#39;ve passed <code>self</code> to a helper function of your render, and it used it like so: <code>&lt;div onClick={_e =&gt; self.send(Click)} /&gt;</code>. This is because the record can&#39;t be found in the scope of the file. Just annotate it: <code>&lt;div onClick={_e =&gt; self.ReasonReact.send(Click)} /&gt;</code>.", "breadcrumb": "record-field-send-handle-not-found"},
{"href": "./record-field-send-handle-not-found.html#title--Record-Field-send-handle-Not-Found", "title": "title: Record Field send/handle Not Found", "contents": "", "rendered": "", "breadcrumb": "record-field-send-handle-not-found"},
{"href": "./record-field-send-handle-not-found.html", "title": "record-field-send-handle-not-found", "contents": "", "rendered": "<hr/>", "breadcrumb": "record-field-send-handle-not-found"},
{"href": "./reason-using-js.html", "title": "code block", "contents": "/* Typing the MyBanner.js component's output as a `reactClass`. */\n/* Note that this file's JS output is located at reason-react-example/lib/js/src/interop/MyBannerRe.js; we're specifying the relative path to MyBanner.js in the string below */\n[@bs.module] external myBanner : ReasonReact.reactClass = \"../../../../src/interop/MyBanner\";\n\nlet make = (~show, ~message, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=myBanner,\n    ~props={\n      \"show\": Js.Boolean.to_js_boolean(show), /* ^ don't forget to convert an OCaml bool into a JS boolean! */\n      \"message\": message /* OCaml string maps to JS string, no conversion needed here */\n    },\n    children\n  );", "rendered": "<pre><code>/* Typing the MyBanner.js component's output as a `reactClass`. */\n/* Note that this file's JS output is located at reason-react-example/lib/js/src/interop/MyBannerRe.js; we're specifying the relative path to MyBanner.js in the string below */\n[@bs.module] external myBanner : ReasonReact.reactClass = \"../../../../src/interop/MyBanner\";\n\nlet make = (~show, ~message, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=myBanner,\n    ~props={\n      \"show\": Js.Boolean.to_js_boolean(show), /* ^ don't forget to convert an OCaml bool into a JS boolean! */\n      \"message\": message /* OCaml string maps to JS string, no conversion needed here */\n    },\n    children\n  );</code></pre>", "breadcrumb": "reason-using-js"},
{"href": "./reason-using-js.html", "title": "reason-using-js", "contents": "MyBannerRe.re", "rendered": "<code>MyBannerRe.re</code>", "breadcrumb": "reason-using-js"},
{"href": "./reason-using-js.html", "title": "code block", "contents": "var ReactDOM = require('react-dom');\nvar React = require('react');\nvar App = React.createClass({\n  displayName: \"MyBanner\",\n  render: function() {\n    if (this.props.show) {\n      return React.createElement('div', null,\n        this.props.message\n      );\n    } else {\n      return null;\n    }\n  }\n});\nmodule.exports = App;", "rendered": "<pre><code>var ReactDOM = require('react-dom');\nvar React = require('react');\nvar App = React.createClass({\n  displayName: \"MyBanner\",\n  render: function() {\n    if (this.props.show) {\n      return React.createElement('div', null,\n        this.props.message\n      );\n    } else {\n      return null;\n    }\n  }\n});\nmodule.exports = App;</code></pre>", "breadcrumb": "reason-using-js"},
{"href": "./reason-using-js.html", "title": "reason-using-js", "contents": "MyBanner.js:", "rendered": "<code>MyBanner.js:</code>", "breadcrumb": "reason-using-js"},
{"href": "./reason-using-js.html#title--ReasonReact-using-ReactJS", "title": "title: ReasonReact using ReactJS", "contents": "", "rendered": "", "breadcrumb": "reason-using-js"},
{"href": "./reason-using-js.html", "title": "reason-using-js", "contents": "", "rendered": "<hr/>", "breadcrumb": "reason-using-js"},
{"href": "./react-ref.html", "title": "code block", "contents": "let handleClick = (event, self) =>\n  switch (self.state.mySectionRef^) {\n  | None => ()\n  | Some(r) => ReasonReact.refToJsObj(r)##someMethod(1, 2, 3) /* I solemnly swear that I am up to no good */\n  };", "rendered": "<pre><code>let handleClick = (event, self) =>\n  switch (self.state.mySectionRef^) {\n  | None => ()\n  | Some(r) => ReasonReact.refToJsObj(r)##someMethod(1, 2, 3) /* I solemnly swear that I am up to no good */\n  };</code></pre>", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "We also expose an escape hatch ReasonReact.refToJsObj of type ReasonReact.reactRef =&gt; Js.t {..}, which turns your ref into a JS object you can freely use; this is only used to access ReactJS component class methods.", "rendered": "We also expose an escape hatch <code>ReasonReact.refToJsObj</code> of type <code>ReasonReact.reactRef =&gt; Js.t {..}</code>, which turns your ref into a JS object you can freely use; <strong>this is only used to access ReactJS component class methods</strong>.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "ReasonReact ref only accept callbacks. The string ref from ReactJS is deprecated.", "rendered": "ReasonReact ref only accept callbacks. The string <code>ref</code> from ReactJS is deprecated.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "You must follow the instanceVars convention in the previous section for ref.", "rendered": "<strong>You must follow the instanceVars convention in the previous section for ref</strong>.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "Note how ReactJS refs can be null. Which is why theRef and myDivRef are converted from a JS nullable to an OCaml option (Some/None). When you use the ref, you&#39;ll be forced to handle the null case through a switch, which prevents subtle errors!", "rendered": "<strong>Note</strong> how <a href=\"https://github.com/facebook/react/issues/9328#issuecomment-298438237\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">ReactJS refs can be null</a>. Which is why <code>theRef</code> and <code>myDivRef</code> are converted from a <a href=\"https://bucklescript.github.io/docs/en/null-undefined-option.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">JS nullable</a> to an OCaml <code>option</code> (Some/None). When you use the ref, you&#39;ll be forced to handle the null case through a <code>switch</code>, which prevents subtle errors!", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "Attaching to a React DOM element looks the same: state.mySectionRef = {myDivRef: Js.Nullable.to_opt(theRef)}.", "rendered": "Attaching to a React DOM element looks the same: <code>state.mySectionRef = {myDivRef: Js.Nullable.to_opt(theRef)}</code>.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "code block", "contents": "type state = {\n  isOpen: bool,\n  mySectionRef: ref(option(ReasonReact.reactRef))\n};\n\nlet setSectionRef = (theRef, {ReasonReact.state}) => {\n  state.mySectionRef := Js.Nullable.to_opt(theRef);\n  /* wondering about Js.Nullable.to_opt? See the note below */\n};\n\nlet component = ReasonReact.reducerComponent(\"MyPanel\");\n\nlet make = (~className=\"\", _children) => {\n  ...component,\n  initialState: () => {isOpen: false, mySectionRef: ref(None)},\n  reducer: ...,\n  render: (self) => <Section1 ref={self.handle(setSectionRef)} />\n};", "rendered": "<pre><code>type state = {\n  isOpen: bool,\n  mySectionRef: ref(option(ReasonReact.reactRef))\n};\n\nlet setSectionRef = (theRef, {ReasonReact.state}) => {\n  state.mySectionRef := Js.Nullable.to_opt(theRef);\n  /* wondering about Js.Nullable.to_opt? See the note below */\n};\n\nlet component = ReasonReact.reducerComponent(\"MyPanel\");\n\nlet make = (~className=\"\", _children) => {\n  ...component,\n  initialState: () => {isOpen: false, mySectionRef: ref(None)},\n  reducer: ...,\n  render: (self) => <Section1 ref={self.handle(setSectionRef)} />\n};</code></pre>", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "A ReasonReact ref would be just another instance variable. You&#39;d type it as ReasonReact.reactRef if it&#39;s attached to a custom component, and Dom.element if it&#39;s attached to a React DOM element.", "rendered": "A ReasonReact <code>ref</code> would be just another instance variable. You&#39;d type it as <code>ReasonReact.reactRef</code> if it&#39;s attached to a custom component, and <code>Dom.element</code> if it&#39;s attached to a React DOM element.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "Not to be confused with Reason ref, the language feature that enables mutation.", "rendered": "<em>Not to be confused with Reason <code>ref</code>, the language feature that enables mutation</em>.", "breadcrumb": "react-ref"},
{"href": "./react-ref.html#title--React-Ref", "title": "title: React Ref", "contents": "", "rendered": "", "breadcrumb": "react-ref"},
{"href": "./react-ref.html", "title": "react-ref", "contents": "", "rendered": "<hr/>", "breadcrumb": "react-ref"},
{"href": "./props-spread.html", "title": "props-spread", "contents": "You can&#39;t. Props spreading is a big source of unpredictability and performance regression (think shouldComponentUpdate). Our API prevents this. If you reaaaaally need it for binding to existing ReactJS components, see this section.", "rendered": "You can&#39;t. Props spreading is a big source of unpredictability and performance regression (think <code>shouldComponentUpdate</code>). Our API prevents this. If you reaaaaally need it for binding to existing ReactJS components, see <a href=\"clone-element.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">this section</a>.", "breadcrumb": "props-spread"},
{"href": "./props-spread.html#title--Props-Spread", "title": "title: Props Spread", "contents": "", "rendered": "", "breadcrumb": "props-spread"},
{"href": "./props-spread.html", "title": "props-spread", "contents": "", "rendered": "<hr/>", "breadcrumb": "props-spread"},
{"href": "./playground.html", "title": "playground", "contents": "You can try ReasonReact, with live JS output, in the Reason Try page. The template&#39;s in the Examples menu.", "rendered": "You can try ReasonReact, with live JS output, in the <a href=\"https://reasonml.github.io/en/try.html?rrjsx=true&reason=LYewJgrgNgpgBAcQE4xgFwJYDsDmcC8cA3gFBxyxpwDGIwADiFjFlYQEowCGAzk512poAdDzRc0MWDx4BhOo2asAFACJkqTLlUBKANxkK6OMC4BreIQD61ABYYoYFFgIA+YofLDvtBkxZoADSecM5gMEgAXHA8UgBmbiHkADwARhBoaEzuygJ8WAJComhI2DgAKiAAorDAAWoAElJQIACEujpwyQD06ZnZweQAvgYjJCSFaAAiAPIAspzCYRGVNTB1rADqGGi2AJJgyska6GVw3a6BcKr0KABuGDAA7rp6QA\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason Try page</a>. The template&#39;s in the Examples menu.", "breadcrumb": "playground"},
{"href": "./playground.html#title--Playground", "title": "title: Playground", "contents": "", "rendered": "", "breadcrumb": "playground"},
{"href": "./playground.html", "title": "playground", "contents": "", "rendered": "<hr/>", "breadcrumb": "playground"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "ReactJS&#39; shouldComponentUpdate counterpart.", "rendered": "ReactJS&#39; <code>shouldComponentUpdate</code> counterpart.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#shouldUpdate", "title": "shouldUpdate", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "ReactJS&#39; prevProps is what you&#39;ve synced in retainedProps, under oldSelf.", "rendered": "ReactJS&#39; <code>prevProps</code> is what you&#39;ve synced in <code>retainedProps</code>, under <code>oldSelf</code>.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#didUpdate", "title": "didUpdate", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "code block", "contents": "{\n  ...component,\n  willUpdate: {oldSelf, newSelf} => ...\n}", "rendered": "<pre><code>{\n  ...component,\n  willUpdate: {oldSelf, newSelf} => ...\n}</code></pre>", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "ReactJS&#39; componentWillUpdate&#39;s nextProps is just the labeled arguments in make, and &quot;current props&quot; (aka this.props) is the props you&#39;ve copied into retainedProps, accessible via {oldSelf}:", "rendered": "ReactJS&#39; <code>componentWillUpdate</code>&#39;s <code>nextProps</code> is just the labeled arguments in <code>make</code>, and &quot;current props&quot; (aka <code>this.props</code>) is the props you&#39;ve copied into <code>retainedProps</code>, accessible via <code>{oldSelf}</code>:", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#willUpdate", "title": "willUpdate", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "code block", "contents": "type state = {someToggle: bool};\n\nlet component = ReasonReact.reducerComponentWithRetainedProps(\"MyComponent\");\n\nlet make = (~name, _children) => {\n  ...component,\n  initialState: () => {someToggle: false},\n  /* just like state, the retainedProps field can return anything! Here it retained the `name` prop's value */\n  retainedProps: name,\n  willReceiveProps: (self) => {\n    if (self.retainedProps === name) {\n      ...\n      /* previous ReactJS logic would be: if (props.name === nextProps.name) */\n    };\n    ...\n  }\n};", "rendered": "<pre><code>type state = {someToggle: bool};\n\nlet component = ReasonReact.reducerComponentWithRetainedProps(\"MyComponent\");\n\nlet make = (~name, _children) => {\n  ...component,\n  initialState: () => {someToggle: false},\n  /* just like state, the retainedProps field can return anything! Here it retained the `name` prop's value */\n  retainedProps: name,\n  willReceiveProps: (self) => {\n    if (self.retainedProps === name) {\n      ...\n      /* previous ReactJS logic would be: if (props.name === nextProps.name) */\n    };\n    ...\n  }\n};</code></pre>", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "Traditional ReactJS componentWillReceiveProps takes in a nextProps. We don&#39;t have nextProps, since those are simply the labeled arguments in make, available to you in the scope. To access the current props, however, you&#39;d use the above retainedProps API:", "rendered": "Traditional ReactJS <code>componentWillReceiveProps</code> takes in a <code>nextProps</code>. We don&#39;t have <code>nextProps</code>, since those are simply the labeled arguments in <code>make</code>, available to you in the scope. To access the <em>current</em> props, however, you&#39;d use the above <code>retainedProps</code> API:", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#willReceiveProps", "title": "willReceiveProps", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "We expose ReasonReact.statelessComponentWithRetainedProps and ReasonReact.reducerComponentWithRetainedProps. Both work like their ordinary non-retained-props counterpart, and require you to specify a new field, retainedProps (of whatever type you&#39;d like) in your component&#39;s spec in make.", "rendered": "We expose <code>ReasonReact.statelessComponentWithRetainedProps</code> and <code>ReasonReact.reducerComponentWithRetainedProps</code>. Both work like their ordinary non-retained-props counterpart, and require you to specify a new field, <code>retainedProps</code> (of whatever type you&#39;d like) in your component&#39;s spec in <code>make</code>.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "code block", "contents": "type retainedProps = {message: string};\n\nlet component = ReasonReact.statelessComponentWithRetainedProps(\"RetainedPropsExample\");\n\nlet make = (~message, _children) => {\n  ...component,\n  retainedProps: {message: message},\n  didUpdate: ({oldSelf, newSelf}) =>\n    if (oldSelf.retainedProps.message !== newSelf.retainedProps.message) {\n      /* do whatever sneaky imperative things here */\n      Js.log(\"props `message` changed!\")\n    },\n  render: (_self) => ...\n};", "rendered": "<pre><code>type retainedProps = {message: string};\n\nlet component = ReasonReact.statelessComponentWithRetainedProps(\"RetainedPropsExample\");\n\nlet make = (~message, _children) => {\n  ...component,\n  retainedProps: {message: message},\n  didUpdate: ({oldSelf, newSelf}) =>\n    if (oldSelf.retainedProps.message !== newSelf.retainedProps.message) {\n      /* do whatever sneaky imperative things here */\n      Js.log(\"props `message` changed!\")\n    },\n  render: (_self) => ...\n};</code></pre>", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "One pattern that&#39;s sometimes used in ReactJS is accessing a lifecyle event&#39;s prevProps (componentDidUpdate), nextProps (componentWillUpdate), and so on. ReasonReact doesn&#39;t automatically keep copies of previous props for you. We provide the retainedProps API for this purpose:", "rendered": "One pattern that&#39;s sometimes used in ReactJS is accessing a lifecyle event&#39;s <code>prevProps</code> (<code>componentDidUpdate</code>), <code>nextProps</code> (<code>componentWillUpdate</code>), and so on. ReasonReact doesn&#39;t automatically keep copies of previous props for you. We provide the <code>retainedProps</code> API for this purpose:", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#Access-next-or-previous-props--retainedProps", "title": "Access next or previous props: retainedProps", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "Some new lifecyle methods act differently. Described below.", "rendered": "<strong>Some new lifecyle methods act differently</strong>. Described below.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "Note that you should return ReasonReact.NoUpdate whenever possible from the lifecycle events. In preparation for ReactJS fiber, we&#39;ll remove the ability to return a new state from lifecycles. If you need to update state, simply send an action to reducer and handle it correspondingly: self.send(DidMountUpdate).", "rendered": "<strong>Note that you should return <code>ReasonReact.NoUpdate</code> whenever possible from the lifecycle events</strong>. In preparation for ReactJS fiber, we&#39;ll remove the ability to return a new state from lifecycles. If you need to update state, simply send an action to <code>reducer</code> and handle it correspondingly: <code>self.send(DidMountUpdate)</code>.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "Note:", "rendered": "Note:", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "code block", "contents": "didMount: self => update(state)\n\nwillReceiveProps: self => state\n\nshouldUpdate: oldAndNewSelf => bool\n\nwillUpdate: oldAndNewSelf => unit\n\ndidUpdate: oldAndNewSelf => unit\n\nwillUnmount: self => unit", "rendered": "<pre><code>didMount: self => update(state)\n\nwillReceiveProps: self => state\n\nshouldUpdate: oldAndNewSelf => bool\n\nwillUpdate: oldAndNewSelf => unit\n\ndidUpdate: oldAndNewSelf => unit\n\nwillUnmount: self => unit</code></pre>", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "ReasonReact supports the familiar ReactJS lifecycle events.", "rendered": "ReasonReact supports the familiar ReactJS lifecycle events.", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html#title--Lifecycles", "title": "title: Lifecycles", "contents": "", "rendered": "", "breadcrumb": "lifecycles"},
{"href": "./lifecycles.html", "title": "lifecycles", "contents": "", "rendered": "<hr/>", "breadcrumb": "lifecycles"},
{"href": "./jsx.html", "title": "jsx", "contents": "For more creative way of leveraging Reason&#39;s type system, data structures and performance to use children to its full potential, see the Children section!", "rendered": "For more creative way of leveraging Reason&#39;s type system, data structures and performance to use <code>children</code> to its full potential, see the <a href=\"children.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Children section</a>!", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "let theChildren = [| <div />, <div /> |];\nReasonReact.element(\n  MyReasonComponent.make(theChildren)\n);", "rendered": "<pre><code>let theChildren = [| <div />, <div /> |];\nReasonReact.element(\n  MyReasonComponent.make(theChildren)\n);</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "This simply passes theChildren without array wrapping. It becomes:", "rendered": "This simply passes <code>theChildren</code> without array wrapping. It becomes:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "let theChildren = [| <div />, <div /> |];\n<MyReasonComponent> ...theChildren </MyReasonComponent>", "rendered": "<pre><code>let theChildren = [| <div />, <div /> |];\n<MyReasonComponent> ...theChildren </MyReasonComponent></code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Which wraps the already wrapped theChildren in another layer of array. To solve this issue, Reason has a special children spread syntax:", "rendered": "Which wraps the already wrapped <code>theChildren</code> in another layer of array. To solve this issue, Reason has a special <a href=\"https://reasonml.github.io/docs/en/jsx.html#children-spread\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">children spread syntax</a>:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "let theChildren = [| <div />, <div /> |];\nReasonReact.element(\n  MyReasonComponent.make([|theChildren|])\n);", "rendered": "<pre><code>let theChildren = [| <div />, <div /> |];\nReasonReact.element(\n  MyReasonComponent.make([|theChildren|])\n);</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Because this actually translates to:", "rendered": "Because this actually translates to:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "let theChildren = [| <div />, <div /> |];\n<MyReasonComponent> theChildren </MyReasonComponent>", "rendered": "<pre><code>let theChildren = [| <div />, <div /> |];\n<MyReasonComponent> theChildren </MyReasonComponent></code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "You&#39;re effectively passing the array [| &lt;div /&gt;, &lt;div /&gt; |] to MyReasonComponent&#39;s children. But this also means that the following wouldn&#39;t work:", "rendered": "You&#39;re effectively passing the array <code>[| &lt;div /&gt;, &lt;div /&gt; |]</code> to <code>MyReasonComponent</code>&#39;s children. But this also means that the following wouldn&#39;t work:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "<MyReasonComponent> <div /> <div /> </MyReasonComponent>", "rendered": "<pre><code><MyReasonComponent> <div /> <div /> </MyReasonComponent></code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "ReasonReact children are fully typed, and you can pass any data structure to it (as long as the receiver component permits it). When you write:", "rendered": "ReasonReact children are <strong>fully typed</strong>, and you can pass any data structure to it (as long as the receiver component permits it). When you write:", "breadcrumb": "jsx"},
{"href": "./jsx.html#Children", "title": "Children", "contents": "", "rendered": "", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Note how ref and key have been lifted out of the JSX call into the ReasonReact.element call. ref and key are reserved in ReasonReact, just like in ReactJS. Don&#39;t use them as props in your component!", "rendered": "<strong>Note how <code>ref</code> and <code>key</code> have been lifted out of the JSX call into the <code>ReasonReact.element</code> call</strong>. <code>ref</code> and <code>key</code> are reserved in ReasonReact, just like in ReactJS. <strong>Don&#39;t</strong> use them as props in your component!", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "The make above is exactly the make function you&#39;ve seen in the previous section.", "rendered": "The <code>make</code> above is exactly the <code>make</code> function you&#39;ve seen in the previous section.", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "ReasonReact.element(MyReasonComponent.make([||]));", "rendered": "<pre><code>ReasonReact.element(MyReasonComponent.make([||]));</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Prop-less &lt;MyReasonComponent /&gt; transforms to:", "rendered": "Prop-less <code>&lt;MyReasonComponent /&gt;</code> transforms to:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "ReasonReact.element(\n  ~key=a,\n  ~ref=b,\n  MyReasonComponent.make(~foo=bar, ~baz=qux, [|child1, child2|])\n);", "rendered": "<pre><code>ReasonReact.element(\n  ~key=a,\n  ~ref=b,\n  MyReasonComponent.make(~foo=bar, ~baz=qux, [|child1, child2|])\n);</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "transforms to", "rendered": "transforms to", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "<MyReasonComponent key={a} ref={b} foo={bar} baz={qux}> {child1} {child2} </MyReasonComponent>", "rendered": "<pre><code><MyReasonComponent key={a} ref={b} foo={bar} baz={qux}> {child1} {child2} </MyReasonComponent></code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html#Capitalized", "title": "Capitalized", "contents": "", "rendered": "", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Note that ReactDOMRe.createElement is intended for internal use by the JSX transform. For escape-hatch scenarios, use ReasonReact.createDomElement instead, as outlined in the children section.", "rendered": "<strong>Note that <code>ReactDOMRe.createElement</code> is intended for internal use by the JSX transform</strong>. For escape-hatch scenarios, use <code>ReasonReact.createDomElement</code> instead, as outlined in the <a href=\"children.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">children section</a>.", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "React.createElement('div', undefined)", "rendered": "<pre><code>React.createElement('div', undefined)</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Which compiles to", "rendered": "Which compiles to", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "ReactDOMRe.createElement(\"div\", [||]);", "rendered": "<pre><code>ReactDOMRe.createElement(\"div\", [||]);</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Prop-less &lt;div /&gt; transforms to:", "rendered": "Prop-less <code>&lt;div /&gt;</code> transforms to:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "React.createElement('div', {foo: bar}, child1, child2)", "rendered": "<pre><code>React.createElement('div', {foo: bar}, child1, child2)</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "which compiles to the JS code:", "rendered": "which compiles to the JS code:", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "ReactDOMRe.createElement(\"div\", ~props=ReactDOMRe.props(~foo=bar, ()), [|child1, child2|]);", "rendered": "<pre><code>ReactDOMRe.createElement(\"div\", ~props=ReactDOMRe.props(~foo=bar, ()), [|child1, child2|]);</code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "transforms into", "rendered": "transforms into", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "code block", "contents": "<div foo={bar}> {child1} {child2} </div>", "rendered": "<pre><code><div foo={bar}> {child1} {child2} </div></code></pre>", "breadcrumb": "jsx"},
{"href": "./jsx.html#Uncapitalized", "title": "Uncapitalized", "contents": "", "rendered": "", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "Reason comes with the JSX syntax! ReasonReact transforms it from an agnostic function call into a ReasonReact-specific call through a macro. To take advantage of ReasonReact JSX, put {&quot;reason&quot;: {&quot;react-jsx&quot;: 2} in your bsconfig.json (schema here).", "rendered": "Reason comes with the <a href=\"https://reasonml.github.io/docs/en/jsx.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">JSX</a> syntax! ReasonReact transforms it from an agnostic function call into a ReasonReact-specific call through a macro. To take advantage of ReasonReact JSX, put <code>{&quot;reason&quot;: {&quot;react-jsx&quot;: 2}</code> in your <a href=\"https://bucklescript.github.io/docs/en/build-configuration.html#reason-refmt\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>bsconfig.json</code></a> (schema <a href=\"http://bucklescript.github.io/bucklescript/docson/#build-schema.json\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>).", "breadcrumb": "jsx"},
{"href": "./jsx.html#title--JSX", "title": "title: JSX", "contents": "", "rendered": "", "breadcrumb": "jsx"},
{"href": "./jsx.html", "title": "jsx", "contents": "", "rendered": "<hr/>", "breadcrumb": "jsx"},
{"href": "./js-using-reason.html", "title": "code block", "contents": "var PageReason = require('path/to/PageReason.js').jsComponent;", "rendered": "<pre><code>var PageReason = require('path/to/PageReason.js').jsComponent;</code></pre>", "breadcrumb": "js-using-reason"},
{"href": "./js-using-reason.html", "title": "js-using-reason", "contents": "Then use it on the JS side through", "rendered": "Then use it on the JS side through", "breadcrumb": "js-using-reason"},
{"href": "./js-using-reason.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"PageReason\");\n\nlet make = (~message, ~extraGreeting=?, _children) => {\n  ...component,\n  render: (_self) => {\n    let greeting =\n      switch (extraGreeting) {\n      | None => \"How are you?\"\n      | Some(g) => g\n      };\n    <div> <MyBannerRe show=true message={message ++ \" \" ++ greeting} /> </div>\n  }\n};\n\nlet jsComponent =\n  ReasonReact.wrapReasonForJs(\n    ~component,\n    (jsProps) =>\n      make(\n        ~message=jsProps##message,\n        ~extraGreeting=?Js.Nullable.to_opt(jsProps##extraGreeting),\n        [||]\n      )\n  );", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"PageReason\");\n\nlet make = (~message, ~extraGreeting=?, _children) => {\n  ...component,\n  render: (_self) => {\n    let greeting =\n      switch (extraGreeting) {\n      | None => \"How are you?\"\n      | Some(g) => g\n      };\n    <div> <MyBannerRe show=true message={message ++ \" \" ++ greeting} /> </div>\n  }\n};\n\nlet jsComponent =\n  ReasonReact.wrapReasonForJs(\n    ~component,\n    (jsProps) =>\n      make(\n        ~message=jsProps##message,\n        ~extraGreeting=?Js.Nullable.to_opt(jsProps##extraGreeting),\n        [||]\n      )\n  );</code></pre>", "breadcrumb": "js-using-reason"},
{"href": "./js-using-reason.html", "title": "js-using-reason", "contents": "PageReason.re:", "rendered": "<code>PageReason.re</code>:", "breadcrumb": "js-using-reason"},
{"href": "./js-using-reason.html#title--ReactJS-using-ReasonReact", "title": "title: ReactJS using ReasonReact", "contents": "", "rendered": "", "breadcrumb": "js-using-reason"},
{"href": "./js-using-reason.html", "title": "js-using-reason", "contents": "", "rendered": "<hr/>", "breadcrumb": "js-using-reason"},
{"href": "./invalid-prop-name.html", "title": "invalid-prop-name", "contents": "For non-DOM components, you need to pick valid prop names.", "rendered": "For non-DOM components, you need to pick valid prop names.", "breadcrumb": "invalid-prop-name"},
{"href": "./invalid-prop-name.html", "title": "invalid-prop-name", "contents": "For data-* and aria-*, this is a bit trickier; words with - in them aren&#39;t valid in Reason/OCaml. When you do want to write them, e.g. &lt;div aria-label=&quot;click me&quot; /&gt;, use cloneElement as a workaround.", "rendered": "For <code>data-*</code> and <code>aria-*</code>, this is a bit trickier; words with <code>-</code> in them aren&#39;t valid in Reason/OCaml. When you do want to write them, e.g. <code>&lt;div aria-label=&quot;click me&quot; /&gt;</code>, use <a href=\"clone-element.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>cloneElement</code></a> as a workaround.", "breadcrumb": "invalid-prop-name"},
{"href": "./invalid-prop-name.html", "title": "invalid-prop-name", "contents": "Prop names like type (as in &lt;input type=&quot;text&quot; /&gt;) aren&#39;t syntactically valid; type is a reserved keyword in Reason/OCaml. Use &lt;input _type=&quot;text&quot; /&gt; instead. This follows BuckleScript&#39;s name mangling rules.", "rendered": "Prop names like <code>type</code> (as in <code>&lt;input type=&quot;text&quot; /&gt;</code>) aren&#39;t syntactically valid; <code>type</code> is a reserved keyword in Reason/OCaml. Use <code>&lt;input _type=&quot;text&quot; /&gt;</code> instead. This follows BuckleScript&#39;s <a href=\"https://bucklescript.github.io/docs/en/object.html#invalid-field-names\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">name mangling rules</a>.", "breadcrumb": "invalid-prop-name"},
{"href": "./invalid-prop-name.html#title--Invalid-Prop-Name", "title": "title: Invalid Prop Name", "contents": "", "rendered": "", "breadcrumb": "invalid-prop-name"},
{"href": "./invalid-prop-name.html", "title": "invalid-prop-name", "contents": "", "rendered": "<hr/>", "breadcrumb": "invalid-prop-name"},
{"href": "./intro-example.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"Greeting\");\n\n/* underscores before names indicate unused variables. We name them for clarity */\nlet make = (~name, _children) => {\n  ...component,\n  render: (_self) => <button> {ReasonReact.stringToElement(\"Hello!\")} </button>\n};", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"Greeting\");\n\n/* underscores before names indicate unused variables. We name them for clarity */\nlet make = (~name, _children) => {\n  ...component,\n  render: (_self) => <button> {ReasonReact.stringToElement(\"Hello!\")} </button>\n};</code></pre>", "breadcrumb": "intro-example"},
{"href": "./intro-example.html", "title": "intro-example", "contents": "Here is a small overview of the ReasonReact API before we start. No worries if some of these are unfamiliar; the docs cover all of them.", "rendered": "Here is a small overview of the ReasonReact API before we start. No worries if some of these are unfamiliar; the docs cover all of them.", "breadcrumb": "intro-example"},
{"href": "./intro-example.html#title--Intro-Example", "title": "title: Intro Example", "contents": "", "rendered": "", "breadcrumb": "intro-example"},
{"href": "./intro-example.html", "title": "intro-example", "contents": "", "rendered": "<hr/>", "breadcrumb": "intro-example"},
{"href": "./interop.html", "title": "code block", "contents": "var MyReasonComponent = require('./myReasonComponent.bs').jsComponent", "rendered": "<pre><code>var MyReasonComponent = require('./myReasonComponent.bs').jsComponent</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "and then import it on the JS side with:", "rendered": "and then import it on the JS side with:", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "let jsComponent = ReasonReact.wrapReasonForJs(...)", "rendered": "<pre><code>let jsComponent = ReasonReact.wrapReasonForJs(...)</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Note: default exports like the one above are supported for BuckleScript &gt;=1.8.2. If that doesn&#39;t work, try a non-default export, like:", "rendered": "<strong>Note</strong>: <code>default</code> exports like the one above are supported for <code>BuckleScript &gt;=1.8.2</code>. If that doesn&#39;t work, try a non-default export, like:", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "var MyReasonComponent = require('./myReasonComponent.bs');\n// make sure you're passing the correct data types!\n<MyReasonComponent name=\"John\" />", "rendered": "<pre><code>var MyReasonComponent = require('./myReasonComponent.bs');\n// make sure you're passing the correct data types!\n<MyReasonComponent name=\"John\" /></code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "The function takes in the labeled reason component you&#39;ve created, and a function that, given the JS props, asks you to call make while passing in the correctly converted parameters. You&#39;d assign the whole thing to the name default. The JS side can then import it:", "rendered": "The function takes in the labeled reason <code>component</code> you&#39;ve created, and a function that, given the JS props, asks you to call <code>make</code> while passing in the correctly converted parameters. You&#39;d assign the whole thing to the name <code>default</code>. The JS side can then import it:", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "let component = ...;\nlet make ...;\n\nlet default =\n  ReasonReact.wrapReasonForJs(\n    ~component,\n    (jsProps) => make(~name=jsProps##name, ~age=?Js.Nullable.to_opt(jsProps##age), [||])\n  );", "rendered": "<pre><code>let component = ...;\nlet make ...;\n\nlet default =\n  ReasonReact.wrapReasonForJs(\n    ~component,\n    (jsProps) => make(~name=jsProps##name, ~age=?Js.Nullable.to_opt(jsProps##age), [||])\n  );</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Eeeeasy. We expose a helper for the other direction, ReasonReact.wrapReasonForJs:", "rendered": "Eeeeasy. We expose a helper for the other direction, <code>ReasonReact.wrapReasonForJs</code>:", "breadcrumb": "interop"},
{"href": "./interop.html#ReactJS-Using-ReasonReact", "title": "ReactJS Using ReasonReact", "contents": "", "rendered": "", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Note: if your app successfully compiles, and you see the error &quot;element type is invalid...&quot; in your console, you might be hitting this mistake.", "rendered": "<strong>Note</strong>: if your app successfully compiles, and you see the error &quot;element type is invalid...&quot; in your console, you might be hitting <a href=\"element-type-is-invalid.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">this mistake</a>.", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "We recommend to type the make parameters, since they&#39;re passed to props into the JS side, which is untyped.", "rendered": "<strong>We recommend</strong> to type the <code>make</code> parameters, since they&#39;re passed to <code>props</code> into the JS side, which is untyped.", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "ReasonReact.wrapJsForReason is the helper we expose for this purpose. It takes in the reactClass you want to wrap, the props js object (of type Js.t {. foo: bar}) you&#39;d pass to it (with values converted from Reason data structures to JS), and the mandatory children you&#39;d forward to the JS side.", "rendered": "<code>ReasonReact.wrapJsForReason</code> is the helper we expose for this purpose. It takes in the <code>reactClass</code> you want to wrap, the <code>props</code> js object (of type <code>Js.t {. foo: bar}</code>) you&#39;d pass to it (with values converted from Reason data structures to JS), and the mandatory children you&#39;d forward to the JS side.", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "[@bs.module] external myJSReactClass : ReasonReact.reactClass = \"./myJSReactClass\";\n\nlet make = (~name: string, ~age: option(int)=?, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=myJSReactClass,\n    ~props={\"name\": name, \"age\": Js.Nullable.fromOption(age)},\n    children\n  );", "rendered": "<pre><code>[@bs.module] external myJSReactClass : ReasonReact.reactClass = \"./myJSReactClass\";\n\nlet make = (~name: string, ~age: option(int)=?, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=myJSReactClass,\n    ~props={\"name\": name, \"age\": Js.Nullable.fromOption(age)},\n    children\n  );</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Easy! Since other Reason components only need you to expose a make function, fake one up:", "rendered": "Easy! Since other Reason components only need you to expose a <code>make</code> function, fake one up:", "breadcrumb": "interop"},
{"href": "./interop.html#ReasonReact-using-ReactJS", "title": "ReasonReact using ReactJS", "contents": "", "rendered": "", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Running npm start (or alias it to your favorite command) starts the bsb build watcher. You don&#39;t have to touch your existing JavaScript build configuration!", "rendered": "Running <code>npm start</code> (or alias it to your favorite command) starts the <code>bsb</code> build watcher. <strong>You don&#39;t have to touch your existing JavaScript build configuration</strong>!", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "\"scripts\": {\n  \"start\": \"bsb -make-world -w\"\n},\n\"devDependencies\": {\n  \"bs-platform\": \"^2.1.0\"\n},\n\"dependencies\": {\n  \"react\": \"^15.4.2\",\n  \"react-dom\": \"^15.4.2\",\n  \"reason-react\": \"^0.3.1\"\n}\n...", "rendered": "<pre><code>\"scripts\": {\n  \"start\": \"bsb -make-world -w\"\n},\n\"devDependencies\": {\n  \"bs-platform\": \"^2.1.0\"\n},\n\"dependencies\": {\n  \"react\": \"^15.4.2\",\n  \"react-dom\": \"^15.4.2\",\n  \"reason-react\": \"^0.3.1\"\n}\n...</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "Then add bs-platform to your package.json (npm install --save-dev bs-platform or yarn add --dev bs-platform):", "rendered": "Then add <code>bs-platform</code> to your package.json (<code>npm install --save-dev bs-platform</code> or <code>yarn add --dev bs-platform</code>):", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "This will build Reason files in my_source_folder (e.g. reasonComponent.re) and output the JS files (e.g. reasonComponent.bs.js) alongside them.", "rendered": "This will build Reason files in <code>my_source_folder</code> (e.g. <code>reasonComponent.re</code>) and output the JS files (e.g. <code>reasonComponent.bs.js</code>) alongside them.", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "code block", "contents": "{\n  \"name\": \"my-project-name\",\n  \"reason\": {\"react-jsx\" : 2},\n  \"sources\": [\n    \"my_source_folder\"\n  ],\n  \"package-specs\": [{\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }],\n  \"suffix\": \".bs.js\",\n  \"namespace\": true,\n  \"bs-dependencies\": [\n    \"reason-react\"\n  ],\n  \"refmt\": 3\n}", "rendered": "<pre><code>{\n  \"name\": \"my-project-name\",\n  \"reason\": {\"react-jsx\" : 2},\n  \"sources\": [\n    \"my_source_folder\"\n  ],\n  \"package-specs\": [{\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  }],\n  \"suffix\": \".bs.js\",\n  \"namespace\": true,\n  \"bs-dependencies\": [\n    \"reason-react\"\n  ],\n  \"refmt\": 3\n}</code></pre>", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "You can reuse the same bsb setup (that you might have seen here)! Aka, put a bsconfig.json at the root of your ReactJS project:", "rendered": "You can reuse the <em>same</em> bsb setup (that you might have seen <a href=\"installation.md#bsb\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>)! Aka, put a <code>bsconfig.json</code> at the root of your ReactJS project:", "breadcrumb": "interop"},
{"href": "./interop.html#Project-Setup", "title": "Project Setup", "contents": "", "rendered": "", "breadcrumb": "interop"},
{"href": "./interop.html#title--Talk-to-Existing-ReactJS-Code", "title": "title: Talk to Existing ReactJS Code", "contents": "", "rendered": "", "breadcrumb": "interop"},
{"href": "./interop.html", "title": "interop", "contents": "", "rendered": "<hr/>", "breadcrumb": "interop"},
{"href": "./instance-variables.html", "title": "instance-variables", "contents": "All your instance variables (subscriptions, refs, etc.) must be in state fields marked as a ref. Don&#39;t directly use a mutable field on the state record, use an immutable field pointing to a Reason ref. Why such constraint? To prepare for concurrent React which needs to manage side-effects &amp; mutations more formally. More details here if you&#39;re ever interested.", "rendered": "<strong>All your instance variables (subscriptions, refs, etc.) must be in state fields marked as a <code>ref</code></strong>. Don&#39;t directly use a <code>mutable</code> field on the state record, use an immutable field pointing to a Reason <code>ref</code>. Why such constraint? To prepare for concurrent React which needs to manage side-effects &amp; mutations more formally. More details <a href=\"https://reasonml.github.io/try/?reason=C4TwDgpgBAzlC8UDeBDAXFAlgO2AGlgHsBbCASWxmBWwGMIA1FAJw2YgDMAKHYASgC+AbgBQAegBUUbIQDuUCWJEAbCMFjVg0REhFQo6KAEY8eoqQpUa9JqyjtuAJj4jh4qRGIBXZSi1QAAystAINaehg4DmYSKFplQhgvdgA6KAAVAAtodhQAEyhCDkDgiFDiTABzTPUAI2grVShakChgbLbMUixgAHI4CAAPCFovLTyMRXcoDi9sZFKBBAA+GbmoLj4VqAAlCBQYQmw9lFpgFIBVMDy-aCQUh9KCWt8lqdV1UscEZAeUp4MGAAzG5JM0xlBvJpMEdCsUgpoytIIBA8nBgIRmjlOKozqisPMEbdHKEqJhlMoAIQKJSlf4kciUah0RgsKBoRAAFlEYJgmUIPgK9SgnJpIgAUjAUglKlwvvSLEzrKzmAA9Pg8qTtTBwWQC5R5bC9dR65gAaywxVk0DymNAkAMCFQGF4BChKBeDQZlmZNhYLtwbzEQA\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a> if you&#39;re ever interested.", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html", "title": "code block", "contents": "type state = {\n  someRandomState: option(string),\n  intervalId: ref(option(int))\n};\n\nlet component = ...; /* remember, `component` needs to be close to `make`, and after `state` type declaration! */\n\nlet make = (_children) => {\n  ...component,\n  initialState: () => {someRandomState: Some(\"hello\"), intervalId: ref(None)},\n  didMount: ({state}) => {\n    /* mutate the value here */\n    state.intervalId := Some(Js.Global.setInterval(...));\n    /* no extra state update needed */\n    ReasonReact.NoUpdate\n  },\n  render: ...\n};", "rendered": "<pre><code>type state = {\n  someRandomState: option(string),\n  intervalId: ref(option(int))\n};\n\nlet component = ...; /* remember, `component` needs to be close to `make`, and after `state` type declaration! */\n\nlet make = (_children) => {\n  ...component,\n  initialState: () => {someRandomState: Some(\"hello\"), intervalId: ref(None)},\n  didMount: ({state}) => {\n    /* mutate the value here */\n    state.intervalId := Some(Js.Global.setInterval(...));\n    /* no extra state update needed */\n    ReasonReact.NoUpdate\n  },\n  render: ...\n};</code></pre>", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html", "title": "instance-variables", "contents": "In reality, this is nothing but a thinly veiled way to mutate a component&#39;s &quot;state&quot;, without triggering a re-render. ReasonReact asks you to correctly put these instance variables into your component&#39;s state, into Reason refs.", "rendered": "In reality, this is nothing but a thinly veiled way to mutate a component&#39;s &quot;state&quot;, without triggering a re-render. ReasonReact asks you to correctly put these instance variables into your component&#39;s <code>state</code>, into Reason <a href=\"https://reasonml.github.io/docs/en/mutation.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>ref</code>s</a>.", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html", "title": "code block", "contents": "const Greeting = React.createClass({\n  intervalId: null,\n  componentDidMount: () => this.intervalId = setInterval(...),\n  render: ...\n});", "rendered": "<pre><code>const Greeting = React.createClass({\n  intervalId: null,\n  componentDidMount: () => this.intervalId = setInterval(...),\n  render: ...\n});</code></pre>", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html", "title": "instance-variables", "contents": "A common pattern in ReactJS is to attach extra variables onto a component&#39;s spec:", "rendered": "A common pattern in ReactJS is to attach extra variables onto a component&#39;s spec:", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html#title--Instance-Variables", "title": "title: Instance Variables", "contents": "", "rendered": "", "breadcrumb": "instance-variables"},
{"href": "./instance-variables.html", "title": "instance-variables", "contents": "", "rendered": "<hr/>", "breadcrumb": "instance-variables"},
{"href": "./installation.html", "title": "installation", "contents": "As with create-react-app, reason-scripts comes with a server and hot-reloading built in.", "rendered": "As with <code>create-react-app</code>, <code>reason-scripts</code> comes with a server and hot-reloading built in.", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "Reason-scripts provides a familiar experience to the ReactJS users who are already familiar with create-react-app. It&#39;s an all-encompassing solution. However, if it&#39;s too heavy for your taste, try the first option above (bsb).", "rendered": "<a href=\"https://github.com/reasonml-community/reason-scripts\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason-scripts</a> provides a familiar experience to the ReactJS users who are already familiar with <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">create-react-app</a>. It&#39;s an all-encompassing solution. However, if it&#39;s too heavy for your taste, try the first option above (bsb).", "breadcrumb": "installation"},
{"href": "./installation.html#Reason-Scripts--Aka-Create-React-App-", "title": "Reason Scripts (Aka Create-React-App)", "contents": "", "rendered": "", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "It compiles to straightforward JS files, so you can open index.html directly from the file system. No server needed.", "rendered": "It compiles to straightforward JS files, so you can open <code>index.html</code> directly from the file system. No server needed.", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "BuckleScript&#39;s bsb build system has an init command that generates a project template. The react theme offers a lightweight solution optimized for low learning overhead and ease of integration into an existing project.", "rendered": "BuckleScript&#39;s <a href=\"https://bucklescript.github.io/docs/en/build-overview.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">bsb</a> build system has an <code>init</code> command that generates a project template. The <code>react</code> theme offers a lightweight solution optimized for low learning overhead and ease of integration into an existing project.", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "code block", "contents": "npm install -g bs-platform\nbsb -init my-react-app -theme react\ncd my-react-app && npm install && npm start\n# in another tab\nnpm run webpack", "rendered": "<pre><code>npm install -g bs-platform\nbsb -init my-react-app -theme react\ncd my-react-app && npm install && npm start\n# in another tab\nnpm run webpack</code></pre>", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "Our preferred option. If it&#39;s your first time trying ReasonReact, feel free to use the more familiar create-react-app option below, too.", "rendered": "<strong>Our preferred option</strong>. If it&#39;s your first time trying ReasonReact, feel free to use the more familiar create-react-app option below, too.", "breadcrumb": "installation"},
{"href": "./installation.html#Bsb", "title": "Bsb", "contents": "", "rendered": "", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "To easily try ReasonReact, we offer two solutions.", "rendered": "To easily try ReasonReact, we offer two solutions.", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "Note: for general Reason + BuckleScript editor setup, see here.", "rendered": "<strong>Note</strong>: for general Reason + BuckleScript editor setup, see <a href=\"https://reasonml.github.io/docs/en/global-installation.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>.", "breadcrumb": "installation"},
{"href": "./installation.html#title--Installation", "title": "title: Installation", "contents": "", "rendered": "", "breadcrumb": "installation"},
{"href": "./installation.html", "title": "installation", "contents": "", "rendered": "<hr/>", "breadcrumb": "installation"},
{"href": "./im-having-a-type-error.html", "title": "im-having-a-type-error", "contents": "Check your terminal to see if we&#39;ve provided a dedicated error message for your use-case! If not, please file an issue here or here. Thanks!", "rendered": "Check your terminal to see if we&#39;ve provided a dedicated error message for your use-case! If not, please file an issue <a href=\"https://github.com/reasonml/reason-react/issues\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a> or <a href=\"https://github.com/reasonml-community/error-message-improvement/issues\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">here</a>. Thanks!", "breadcrumb": "im-having-a-type-error"},
{"href": "./im-having-a-type-error.html#title--I--39-m-Having-a-Type-Error", "title": "title: I&#39;m Having a Type Error", "contents": "", "rendered": "", "breadcrumb": "im-having-a-type-error"},
{"href": "./im-having-a-type-error.html", "title": "im-having-a-type-error", "contents": "", "rendered": "<hr/>", "breadcrumb": "im-having-a-type-error"},
{"href": "./i-really-need-feature-x-from-reactjs.html", "title": "i-really-need-feature-x-from-reactjs", "contents": "First make sure that you indeed can&#39;t achieve this idiom using the latest version of ReasonReact. If you need help figuring out how to translate a certain idiom, feel free to ask us on Discord. If it is not achievable with ReasonReact, you can always write the component in ReactJS first, then bind to it using our interop. Try to isolate the required functionality into a tiny ReactJS component and write the rest of your code in ReasonReact. Once this is done, feel free to file an issue explaining your use case!", "rendered": "First make sure that you indeed can&#39;t achieve this idiom using the latest version of ReasonReact. If you need help figuring out how to translate a certain idiom, feel free to ask us on <a href=\"https://discord.gg/reasonml\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Discord</a>. If it is not achievable with ReasonReact, you can always write the component in ReactJS first, then bind to it using <a href=\"interop.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">our interop</a>. Try to isolate the required functionality into a tiny ReactJS component and write the rest of your code in ReasonReact. Once this is done, feel free to <a href=\"https://github.com/reasonml/reason-react/issues\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">file an issue</a> explaining your use case!", "breadcrumb": "i-really-need-feature-x-from-reactjs"},
{"href": "./i-really-need-feature-x-from-reactjs.html#title--I-Really-Need-Feature-X-From-ReactJS", "title": "title: I Really Need Feature X From ReactJS", "contents": "", "rendered": "", "breadcrumb": "i-really-need-feature-x-from-reactjs"},
{"href": "./i-really-need-feature-x-from-reactjs.html", "title": "i-really-need-feature-x-from-reactjs", "contents": "", "rendered": "<hr/>", "breadcrumb": "i-really-need-feature-x-from-reactjs"},
{"href": "./functional-component.html", "title": "functional-component", "contents": "You can use a function as a component in ReactJS. In ReasonReact, this is not yet possible (soon!); though you can obviously just call the function without using the JSX syntax: MyList.make(~className=&quot;foo&quot;, [||]).", "rendered": "You can use a function as a component in ReactJS. In ReasonReact, this is not yet possible (soon!); though you can obviously just call the function without using the JSX syntax: <code>MyList.make(~className=&quot;foo&quot;, [||])</code>.", "breadcrumb": "functional-component"},
{"href": "./functional-component.html#title--Functional-Component", "title": "title: Functional Component", "contents": "", "rendered": "", "breadcrumb": "functional-component"},
{"href": "./functional-component.html", "title": "functional-component", "contents": "", "rendered": "<hr/>", "breadcrumb": "functional-component"},
{"href": "./example-projects.html", "title": "example-projects", "contents": "Feel free to submit yours!", "rendered": "Feel free to submit yours!", "breadcrumb": "example-projects"},
{"href": "./example-projects.html#title--Example-Projects", "title": "title: Example Projects", "contents": "", "rendered": "", "breadcrumb": "example-projects"},
{"href": "./example-projects.html", "title": "example-projects", "contents": "", "rendered": "<hr/>", "breadcrumb": "example-projects"},
{"href": "./event.html", "title": "event", "contents": "More info on the ReactDOMRe module below in the Working with DOM section.", "rendered": "More info on the <code>ReactDOMRe</code> module below in the <a href=\"dom.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Working with DOM</a> section.", "breadcrumb": "event"},
{"href": "./event.html", "title": "code block", "contents": "ReactDOMRe.domElementToObj(ReactEventRe.Form.target(event))##value;", "rendered": "<pre><code>ReactDOMRe.domElementToObj(ReactEventRe.Form.target(event))##value;</code></pre>", "breadcrumb": "event"},
{"href": "./event.html", "title": "event", "contents": "If you&#39;re accessing fields on your event object, like event.target.value, you&#39;d use a combination of a ReactDOMRe helper and BuckleScript&#39;s ## object access FFI:", "rendered": "If you&#39;re accessing fields on your event object, like <code>event.target.value</code>, you&#39;d use a combination of a <code>ReactDOMRe</code> helper and <a href=\"https://bucklescript.github.io/docs/en/object.html#accessors\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">BuckleScript&#39;s <code>##</code> object access FFI</a>:", "breadcrumb": "event"},
{"href": "./event.html", "title": "event", "contents": "ReasonReact events map cleanly to ReactJS synthetic events. More info in the inline docs.", "rendered": "ReasonReact events map cleanly to ReactJS <a href=\"https://reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">synthetic events</a>. More info in the <a href=\"https://github.com/reasonml/reason-react/blob/380358e5894d4223e7dd9c1fb2df72f0756231bc/src/reactEventRe.rei#L1\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">inline docs</a>.", "breadcrumb": "event"},
{"href": "./event.html#title--Event", "title": "title: Event", "contents": "", "rendered": "", "breadcrumb": "event"},
{"href": "./event.html", "title": "event", "contents": "", "rendered": "<hr/>", "breadcrumb": "event"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "&quot;element type is invalid... You likely forgot to export your component from the file it&#39;s defined in, or you might have mixed up default and named imports&quot;", "rendered": "&quot;element type is invalid... You likely forgot to export your component from the file it&#39;s defined in, or you might have mixed up default and named imports&quot;", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "Remember that Reason doesn&#39;t have runtime type errors! So it must have meant that your binding was written wrongly.", "rendered": "Remember that Reason doesn&#39;t have runtime type errors! So it <em>must</em> have meant that your binding was written wrongly.", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "code block", "contents": "[@bs.module \"./myJSReactClass\"] external myJSReactClass : ReasonReact.reactClass = \"default\";", "rendered": "<pre><code>[@bs.module \"./myJSReactClass\"] external myJSReactClass : ReasonReact.reactClass = \"default\";</code></pre>", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "Use:", "rendered": "Use:", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "code block", "contents": "[@bs.module] external myJSReactClass : ReasonReact.reactClass = \"./myJSReactClass\";", "rendered": "<pre><code>[@bs.module] external myJSReactClass : ReasonReact.reactClass = \"./myJSReactClass\";</code></pre>", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "This is a common mistake. Please see BuckleScript&#39;s Import an ES6 Default Value. Aka, instead of:", "rendered": "This is a common mistake. Please see BuckleScript&#39;s <a href=\"https://bucklescript.github.io/docs/en/import-export.html#import-an-es6-default-value\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Import an ES6 Default Value</a>. Aka, instead of:", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "This likely means that:", "rendered": "This likely means that:", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "If you you run your app and see in the console the error:", "rendered": "If you you run your app and see in the console the error:", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html#title--Element-Type-is-Invalid-Runtime-Error", "title": "title: Element Type is Invalid Runtime Error", "contents": "", "rendered": "", "breadcrumb": "element-type-is-invalid"},
{"href": "./element-type-is-invalid.html", "title": "element-type-is-invalid", "contents": "", "rendered": "<hr/>", "breadcrumb": "element-type-is-invalid"},
{"href": "./dom.html", "title": "dom", "contents": "renderToStaticMarkup : ReactRe.reactElement =&gt; string", "rendered": "<code>renderToStaticMarkup</code> : <code>ReactRe.reactElement =&gt; string</code>", "breadcrumb": "dom"},
{"href": "./dom.html", "title": "dom", "contents": "renderToString : ReactRe.reactElement =&gt; string", "rendered": "<code>renderToString</code> : <code>ReactRe.reactElement =&gt; string</code>", "breadcrumb": "dom"},
{"href": "./dom.html", "title": "dom", "contents": "ReasonReact&#39;s equivalent ReactDOMServerRe exposes:", "rendered": "ReasonReact&#39;s equivalent <code>ReactDOMServerRe</code> exposes:", "breadcrumb": "dom"},
{"href": "./dom.html#ReactDOMServer", "title": "ReactDOMServer", "contents": "", "rendered": "", "breadcrumb": "dom"},
{"href": "./dom.html", "title": "dom", "contents": "And 4 convenience utilities:", "rendered": "And 4 convenience utilities:", "breadcrumb": "dom"},
{"href": "./dom.html", "title": "dom", "contents": "ReasonReact&#39;s ReactDOM module is called ReactDOMRe. The module exposes helpers that work with familiar ReactJS idioms. For example, to access event.target.value, you can do ReactDOMRe.domElementToObj(ReactEventRe.Form.target(event))##value.", "rendered": "ReasonReact&#39;s ReactDOM module is called <code>ReactDOMRe</code>. The module exposes helpers that work with familiar ReactJS idioms. For example, to access <code>event.target.value</code>, you can do <code>ReactDOMRe.domElementToObj(ReactEventRe.Form.target(event))##value</code>.", "breadcrumb": "dom"},
{"href": "./dom.html#ReactDOM", "title": "ReactDOM", "contents": "", "rendered": "", "breadcrumb": "dom"},
{"href": "./dom.html#title--Working-with-DOM", "title": "title: Working with DOM", "contents": "", "rendered": "", "breadcrumb": "dom"},
{"href": "./dom.html", "title": "dom", "contents": "", "rendered": "<hr/>", "breadcrumb": "dom"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "If this part&#39;s unclear, or if it doesn&#39;t work in your case, please file an issue!", "rendered": "<em>If this part&#39;s unclear, or if it doesn&#39;t work in your case, please <a href=\"https://github.com/reasonml/reason-react/issues/new\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">file an issue</a></em>!", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "If the component does conceptually refer to this, then still try to turn it into a normal let value that takes in a normal argument instead of reading into the component&#39;s this.", "rendered": "If the component <em>does</em> conceptually refer to <code>this</code>, then still try to turn it into a normal <code>let</code> value that takes in a normal argument instead of reading into the component&#39;s <code>this</code>.", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "If the component property/method doesn&#39;t refer to the component instance (aka this in JS), then it can just be a static class property, in which case you should just export a normal let value.", "rendered": "If the component property/method doesn&#39;t refer to the component instance (aka <code>this</code> in JS), then it can just be a static class property, in which case you should just export a normal <code>let</code> value.", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html#Instance--Component--Property", "title": "Instance (Component) Property", "contents": "", "rendered": "", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "Keep it simple!", "rendered": "Keep it simple!", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "code block", "contents": "let component = ...;\nlet make = ...;\n\nlet getRandomNumber = () => 4;", "rendered": "<pre><code>let component = ...;\nlet make = ...;\n\nlet getRandomNumber = () => 4;</code></pre>", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "Just export a standalone value/function:", "rendered": "Just export a standalone value/function:", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html#Static-Class-Property", "title": "Static Class Property", "contents": "", "rendered": "", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "Since ReasonReact components are created from a record (which has fixed fields), you can&#39;t attach arbitrary fields onto it. Here are the solutions.", "rendered": "Since ReasonReact components are created from a record (which has fixed fields), you can&#39;t attach arbitrary fields onto it. Here are the solutions.", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "code block", "contents": "class HelloMessage extends React.Component {\n  static getRandomNumber() {\n    return 4;\n  };\n\n  getAnswerToLife() {\n    return 42;\n  };\n\n  render() {\n    ...\n  }\n}", "rendered": "<pre><code>class HelloMessage extends React.Component {\n  static getRandomNumber() {\n    return 4;\n  };\n\n  getAnswerToLife() {\n    return 42;\n  };\n\n  render() {\n    ...\n  }\n}</code></pre>", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "Your ReactJS component might have extra properties attached onto it:", "rendered": "Your ReactJS component might have extra properties attached onto it:", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html#title--Custom-Class-Component-Property", "title": "title: Custom Class/Component Property", "contents": "", "rendered": "", "breadcrumb": "custom-class-component-property"},
{"href": "./custom-class-component-property.html", "title": "custom-class-component-property", "contents": "", "rendered": "<hr/>", "breadcrumb": "custom-class-component-property"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "You might have seen the render: (self) =&gt; ... part in make. The concept of JavaScript this doesn&#39;t exist in ReasonReact (but can exist in Reason, since it has an optional object system); the this equivalent is called self. It&#39;s a record that contains state, retainedProps, handle and reduce, which we pass around to the lifecycle events, render and a few others, when they need the bag of information. These concepts will be explained later on.", "rendered": "You might have seen the <code>render: (self) =&gt; ...</code> part in <code>make</code>. The concept of JavaScript <code>this</code> doesn&#39;t exist in ReasonReact (but can exist in Reason, since it has an optional object system); the <code>this</code> equivalent is called <code>self</code>. It&#39;s a record that contains <code>state</code>, <code>retainedProps</code>, <code>handle</code> and <code>reduce</code>, which we pass around to the lifecycle events, <code>render</code> and a few others, when they need the bag of information. These concepts will be explained later on.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html#self", "title": "self", "contents": "", "rendered": "", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "It says &quot;I understand that age is optional and that when I use the label I should pass an int. But I&#39;d like to forward an option value explicitly&quot;. This isn&#39;t a JSX trick we&#39;ve made up; it&#39;s just a language feature! See the section on &quot;Explicitly Passed Optional&quot; in the Reason docs.", "rendered": "It says &quot;I understand that <code>age</code> is optional and that when I use the label I should pass an int. But I&#39;d like to forward an <code>option</code> value explicitly&quot;. This isn&#39;t a JSX trick we&#39;ve made up; it&#39;s just a language feature! See the section on &quot;Explicitly Passed Optional&quot; in the <a href=\"https://reasonml.github.io/docs/en/function.html#explicitly-passed-optional\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Reason docs</a>.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "<Foo name=\"Reason\" age=?ageFromProps />", "rendered": "<pre><code><Foo name=\"Reason\" age=?ageFromProps /></code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Cumbersome. Fortunately, here&#39;s a better way to explicitly pass an optional value:", "rendered": "Cumbersome. Fortunately, here&#39;s a better way to explicitly pass an optional value:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "switch (ageFromProps) {\n| None => <Foo name=\"Reason\" />\n| Some(nonNullableAge) => <Foo name=\"Reason\" age=nonNullableAge />\n}", "rendered": "<pre><code>switch (ageFromProps) {\n| None => <Foo name=\"Reason\" />\n| Some(nonNullableAge) => <Foo name=\"Reason\" age=nonNullableAge />\n}</code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Because age expects a normal int when you do call Foo with it, not an option int! Naively, you&#39;d be forced to solve this like so:", "rendered": "Because <code>age</code> expects a normal <code>int</code> when you do call <code>Foo</code> with it, not an <code>option int</code>! Naively, you&#39;d be forced to solve this like so:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "<Foo name=\"Reason\" age=ageFromProps />", "rendered": "<pre><code><Foo name=\"Reason\" age=ageFromProps /></code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "In Reason, if you want to explicitly pass an optional ageFromProps (whose type is option int, aka None | Some int), the following wouldn&#39;t work:", "rendered": "In Reason, if you want to explicitly pass an optional <code>ageFromProps</code> (whose type is <code>option int</code>, aka <code>None | Some int</code>), the following wouldn&#39;t work:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "This is a source of bugs, because this.props.age might be accidentally changed to a nullable number while Foo doesn&#39;t expect it to be so, or vice-versa; it might be nullable before, and now it&#39;s not and Foo is left with a useless null check somewhere in the render.", "rendered": "This is a source of bugs, because <code>this.props.age</code> might be accidentally changed to a nullable number while <code>Foo</code> doesn&#39;t expect it to be so, or vice-versa; it might be nullable before, and now it&#39;s not and <code>Foo</code> is left with a useless null check somewhere in the render.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "<Foo name=\"Reason\" age={this.props.age} />", "rendered": "<pre><code><Foo name=\"Reason\" age={this.props.age} /></code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Sometimes in ReactJS, you&#39;re being given a prop from the owner that you&#39;d like to forward directly to the child:", "rendered": "Sometimes in ReactJS, you&#39;re being given a prop from the owner that you&#39;d like to forward directly to the child:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html#Neat-Trick-with-Props-Forwarding", "title": "Neat Trick with Props Forwarding", "contents": "", "rendered": "", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Following that example, you&#39;d call that component in another file through &lt;Foo name=&quot;Reason&quot; /&gt;. className, if omitted, defaults to &quot;box&quot;. age defaults to None. If you&#39;d like to explicitly pass age, simply do so: &lt;Foo name=&quot;Reason&quot; age=20 /&gt;.", "rendered": "Following that example, you&#39;d call that component in another file through <code>&lt;Foo name=&quot;Reason&quot; /&gt;</code>. <code>className</code>, if omitted, defaults to &quot;box&quot;. <code>age</code> defaults to <code>None</code>. If you&#39;d like to explicitly pass <code>age</code>, simply do so: <code>&lt;Foo name=&quot;Reason&quot; age=20 /&gt;</code>.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "The prop name cannot be ref nor key. Those are reserved, just like in ReactJS.", "rendered": "<strong>The prop name cannot be <code>ref</code> nor <code>key</code></strong>. Those are reserved, just like in ReactJS.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "The last prop must be children. If you don&#39;t use it, simply ignore it by naming it _ or _children. Names starting with underscore don&#39;t trigger compiler warnings if they&#39;re unused.", "rendered": "The last prop <strong>must</strong> be <code>children</code>. If you don&#39;t use it, simply ignore it by naming it <code>_</code> or <code>_children</code>. Names starting with underscore don&#39;t trigger compiler warnings if they&#39;re unused.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Props are just the labeled arguments of the make function, seen above. They can also be optional and/or have defaults, e.g. let make = (~name, ~age=?, ~className=&quot;box&quot;, _children) =&gt; ....", "rendered": "Props are just the labeled arguments of the <code>make</code> function, seen above. They can also be optional and/or have defaults, e.g. <code>let make = (~name, ~age=?, ~className=&quot;box&quot;, _children) =&gt; ...</code>.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html#Props", "title": "Props", "contents": "", "rendered": "", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Since make is called at every JSX invocation, you&#39;d be accidentally creating a fresh new component every time.", "rendered": "Since <code>make</code> is called at every JSX invocation, you&#39;d be accidentally creating a fresh new component every time.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "let make = _children => {\n  ...(ReasonReact.statelessComponent(\"Greeting\")),\n  render: self => blabla\n}", "rendered": "<pre><code>let make = _children => {\n  ...(ReasonReact.statelessComponent(\"Greeting\")),\n  render: self => blabla\n}</code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "Note: do not inline let component into the make function body like the following!", "rendered": "<strong>Note</strong>: do <strong>not</strong> inline <code>let component</code> into the <code>make</code> function body like the following!", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "make asks you to return the component record created above. You&#39;d override a few fields, such as the familiar render, initialState, didMount, etc., all described later.", "rendered": "<code>make</code> asks you to return the component record created above. You&#39;d override a few fields, such as the familiar <code>render</code>, <code>initialState</code>, <code>didMount</code>, etc., all described later.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "ReasonReact.element(Greeting.make(~name=\"John\", [||])) /* the `make` function in the module `Greeting` */\n/* equivalent to <Greeting name=\"John\" /> */", "rendered": "<pre><code>ReasonReact.element(Greeting.make(~name=\"John\", [||])) /* the `make` function in the module `Greeting` */\n/* equivalent to <Greeting name=\"John\" /> */</code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "The make function is what&#39;s called by ReasonReact&#39;s JSX, described later. For now, the JSX-less way of calling &amp; rendering a component is:", "rendered": "The <code>make</code> function is what&#39;s called by ReasonReact&#39;s JSX, described later. For now, the JSX-less way of calling &amp; rendering a component is:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "/* still in Greeting.re */\nlet component = ReasonReact.statelessComponent(\"Greeting\");\n\nlet make = (~name, _children) => {\n  ...component, /* spread the template's other defaults into here  */\n  render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n};", "rendered": "<pre><code>/* still in Greeting.re */\nlet component = ReasonReact.statelessComponent(\"Greeting\");\n\nlet make = (~name, _children) => {\n  ...component, /* spread the template's other defaults into here  */\n  render: _self => <div> {ReasonReact.stringToElement(name)} </div>\n};</code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "In ReactJS, you&#39;d create a component class and call it through JSX which transforms into React.createElement(myClass, {prop1: &#39;hello&#39;}) under the hood. In ReasonReact, instead of passing the whole &quot;class&quot; (aka component template) into a hypothetical ReasonReact.createElement function, you&#39;d instead declare a make function:", "rendered": "<strong>In ReactJS</strong>, you&#39;d create a component class and call it through JSX which transforms into <code>React.createElement(myClass, {prop1: &#39;hello&#39;})</code> under the hood. <strong>In ReasonReact</strong>, instead of passing the whole &quot;class&quot; (aka component template) into a hypothetical <code>ReasonReact.createElement</code> function, you&#39;d instead declare a <code>make</code> function:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "code block", "contents": "let component = ReasonReact.statelessComponent(\"Greeting\");", "rendered": "<pre><code>let component = ReasonReact.statelessComponent(\"Greeting\");</code></pre>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "As an example, here&#39;s the file Greeting.re:", "rendered": "As an example, here&#39;s the file <code>Greeting.re</code>:", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "The component template is created through ReasonReact.statelessComponent(&quot;TheComponentName&quot;). The string being passed is for debugging purposes (the equivalent of ReactJS&#39; displayName).", "rendered": "The component template is created through <code>ReasonReact.statelessComponent(&quot;TheComponentName&quot;)</code>. The string being passed is for debugging purposes (the equivalent of ReactJS&#39; <a href=\"https://reactjs.org/docs/react-component.html#displayname\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><code>displayName</code></a>).", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "ReasonReact doesn&#39;t use/need classes. The component creation API gives you a plain record, whose fields (like render) you can override.", "rendered": "ReasonReact doesn&#39;t use/need classes. The component creation API gives you a plain record, whose fields (like <code>render</code>) you can override.", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "The documentation assumes relative familiarity with ReactJS.", "rendered": "<em>The documentation assumes relative familiarity with ReactJS.</em>", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html#title--Creation--Props--amp--Self", "title": "title: Creation, Props &amp; Self", "contents": "", "rendered": "", "breadcrumb": "creation-props-self"},
{"href": "./creation-props-self.html", "title": "creation-props-self", "contents": "", "rendered": "<hr/>", "breadcrumb": "creation-props-self"},
{"href": "./counter.html", "title": "code block", "contents": "type action =\n  | Tick;\n\ntype state = {count: int};\n\nlet component = ReasonReact.reducerComponent(\"Counter\");\n\nlet make = _children => {\n  ...component,\n  initialState: () => {count: 0},\n  reducer: (action, state) =>\n    switch (action) {\n    | Tick => ReasonReact.Update({count: state.count + 1})\n    },\n  subscriptions: self => [\n    Sub(\n      () => Js.Global.setInterval(() => self.send(Tick), 1000),\n      Js.Global.clearInterval\n    )\n  ],\n  render: ({state}) =>\n    <div>{ReasonReact.stringToElement(string_of_int(state.count))}</div>\n};", "rendered": "<pre><code>type action =\n  | Tick;\n\ntype state = {count: int};\n\nlet component = ReasonReact.reducerComponent(\"Counter\");\n\nlet make = _children => {\n  ...component,\n  initialState: () => {count: 0},\n  reducer: (action, state) =>\n    switch (action) {\n    | Tick => ReasonReact.Update({count: state.count + 1})\n    },\n  subscriptions: self => [\n    Sub(\n      () => Js.Global.setInterval(() => self.send(Tick), 1000),\n      Js.Global.clearInterval\n    )\n  ],\n  render: ({state}) =>\n    <div>{ReasonReact.stringToElement(string_of_int(state.count))}</div>\n};</code></pre>", "breadcrumb": "counter"},
{"href": "./counter.html", "title": "counter", "contents": "Or, using the subscriptions helper:", "rendered": "Or, using the <a href=\"subscriptions-helper.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">subscriptions helper</a>:", "breadcrumb": "counter"},
{"href": "./counter.html", "title": "code block", "contents": "type action =\n  | Tick;\n\ntype state = {\n  count: int,\n  timerId: ref(option(Js.Global.intervalId))\n};\n\nlet component = ReasonReact.reducerComponent(\"Counter\");\n\nlet make = _children => {\n  ...component,\n  initialState: () => {count: 0, timerId: ref(None)},\n  reducer: (action, state) =>\n    switch (action) {\n    | Tick => ReasonReact.Update({...state, count: state.count + 1})\n    },\n  didMount: self => {\n    self.state.timerId :=\n      Some(Js.Global.setInterval(() => self.send(Tick), 1000));\n    ReasonReact.NoUpdate;\n  },\n  willUnmount: self => {\n    switch (self.state.timerId^) {\n    | Some(id) => Js.Global.clearInterval(id)\n    | None => ()\n    }\n  },\n  render: ({state}) =>\n    <div>{ReasonReact.stringToElement(string_of_int(state.count))}</div>\n};", "rendered": "<pre><code>type action =\n  | Tick;\n\ntype state = {\n  count: int,\n  timerId: ref(option(Js.Global.intervalId))\n};\n\nlet component = ReasonReact.reducerComponent(\"Counter\");\n\nlet make = _children => {\n  ...component,\n  initialState: () => {count: 0, timerId: ref(None)},\n  reducer: (action, state) =>\n    switch (action) {\n    | Tick => ReasonReact.Update({...state, count: state.count + 1})\n    },\n  didMount: self => {\n    self.state.timerId :=\n      Some(Js.Global.setInterval(() => self.send(Tick), 1000));\n    ReasonReact.NoUpdate;\n  },\n  willUnmount: self => {\n    switch (self.state.timerId^) {\n    | Some(id) => Js.Global.clearInterval(id)\n    | None => ()\n    }\n  },\n  render: ({state}) =>\n    <div>{ReasonReact.stringToElement(string_of_int(state.count))}</div>\n};</code></pre>", "breadcrumb": "counter"},
{"href": "./counter.html", "title": "counter", "contents": "Demonstrates calling an async &quot;setState&quot; in ReasonReact.", "rendered": "Demonstrates calling an async &quot;setState&quot; in ReasonReact.", "breadcrumb": "counter"},
{"href": "./counter.html#title--Counter", "title": "title: Counter", "contents": "", "rendered": "", "breadcrumb": "counter"},
{"href": "./counter.html", "title": "counter", "contents": "", "rendered": "<hr/>", "breadcrumb": "counter"},
{"href": "./context-mixins.html", "title": "context-mixins", "contents": "ReasonReact doesn&#39;t support ReactJS mixins. Composing normal functions is a good alternative.", "rendered": "ReasonReact doesn&#39;t support ReactJS mixins. Composing normal functions is a good alternative.", "breadcrumb": "context-mixins"},
{"href": "./context-mixins.html", "title": "context-mixins", "contents": "ReactJS&#39; context API is currently unstable. To avoid excessive API surface, ReasonReact doesn&#39;t bind to it (yet).", "rendered": "ReactJS&#39; context API is currently unstable. To avoid excessive API surface, ReasonReact doesn&#39;t bind to it (yet).", "breadcrumb": "context-mixins"},
{"href": "./context-mixins.html#title--Context--amp--Mixins-", "title": "title: Context &amp; Mixins?", "contents": "", "rendered": "", "breadcrumb": "context-mixins"},
{"href": "./context-mixins.html", "title": "context-mixins", "contents": "", "rendered": "<hr/>", "breadcrumb": "context-mixins"},
{"href": "./component-as-prop.html", "title": "component-as-prop", "contents": "This also has some added advantages:", "rendered": "This also has some added advantages:", "breadcrumb": "component-as-prop"},
{"href": "./component-as-prop.html", "title": "code block", "contents": "let bannerCallback = (prop1, prop2) => <MyBanner message=prop1 count=prop2 />;\n\n<Menu bannerFunc=bannerCallback />;", "rendered": "<pre><code>let bannerCallback = (prop1, prop2) => <MyBanner message=prop1 count=prop2 />;\n\n<Menu bannerFunc=bannerCallback />;</code></pre>", "breadcrumb": "component-as-prop"},
{"href": "./component-as-prop.html", "title": "component-as-prop", "contents": "In ReactJS, &lt;Menu banner=MyBanner /&gt; is easy; in ReasonReact, we can&#39;t trivially pass the whole component module (it wouldn&#39;t even be syntactically valid. A module resides in another layer of language. Explanations). Solution:", "rendered": "In ReactJS, <code>&lt;Menu banner=MyBanner /&gt;</code> is easy; in ReasonReact, we can&#39;t trivially pass the whole component module (it wouldn&#39;t even be syntactically valid. A module resides in another layer of language. <a href=\"https://reasonml.github.io/docs/en/module.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Explanations</a>). Solution:", "breadcrumb": "component-as-prop"},
{"href": "./component-as-prop.html#title--Component-as-Prop", "title": "title: Component as Prop", "contents": "", "rendered": "", "breadcrumb": "component-as-prop"},
{"href": "./component-as-prop.html", "title": "component-as-prop", "contents": "", "rendered": "<hr/>", "breadcrumb": "component-as-prop"},
{"href": "./community.html", "title": "community", "contents": "Come say hi!", "rendered": "Come say hi!", "breadcrumb": "community"},
{"href": "./community.html", "title": "community", "contents": "This is where we keep track of all the awesome things happening in the community.", "rendered": "This is where we keep track of all the awesome things happening in the community.", "breadcrumb": "community"},
{"href": "./community.html#title--Community", "title": "title: Community", "contents": "", "rendered": "", "breadcrumb": "community"},
{"href": "./community.html", "title": "community", "contents": "", "rendered": "<hr/>", "breadcrumb": "community"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "You can also use cloneElement to simulate prop spreading, but this is discouraged in ReasonReact.", "rendered": "You can also use <code>cloneElement</code> to simulate <a href=\"props-spread.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">prop spreading</a>, but this is discouraged in ReasonReact.", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "For non-DOM components, you need to use valid prop names.", "rendered": "For non-DOM components, you need to use valid prop names.", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "This will assign the extra data-payload and aria-label props (both untyped, be careful!) onto the div, through a clever, syntactically valid use of Reason&#39;s JS object sugar for BuckleScript objects.", "rendered": "This will assign the extra <code>data-payload</code> and <code>aria-label</code> props (<strong>both untyped</strong>, be careful!) onto the <code>div</code>, through a clever, syntactically valid use of Reason&#39;s JS object sugar for <a href=\"https://bucklescript.github.io/docs/en/object.html#object-as-record\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">BuckleScript objects</a>.", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "code block", "contents": "let myElement =\n  ReasonReact.cloneElement(\n    <div className=\"foo\" />,\n    ~props={\"data-payload\": 1, \"aria-label\": \"click me\"},\n    [||]\n  );", "rendered": "<pre><code>let myElement =\n  ReasonReact.cloneElement(\n    <div className=\"foo\" />,\n    ~props={\"data-payload\": 1, \"aria-label\": \"click me\"},\n    [||]\n  );</code></pre>", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "You&#39;d use cloneElement to circumvent it like so:", "rendered": "You&#39;d use <code>cloneElement</code> to circumvent it like so:", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "code block", "contents": "<div data-payload=1 aria-label=\"click me\" className=\"foo\" />", "rendered": "<pre><code><div data-payload=1 aria-label=\"click me\" className=\"foo\" /></code></pre>", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "Same as ReactJS&#39; cloneElement. However, adding extra props to a ReasonReact component doesn&#39;t make sense; you&#39;d use a render prop. Therefore, ReasonReact.cloneElement is only used for edge-case interop situations. For example, data-* and aria-* attributes aren&#39;t syntactically valid as a function label. The following doesn&#39;t parse:", "rendered": "Same as ReactJS&#39; <a href=\"https://reactjs.org/docs/react-api.html#cloneelement\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">cloneElement</a>. However, adding extra props to a ReasonReact component doesn&#39;t make sense; you&#39;d use a <a href=\"https://reactjs.org/docs/render-props.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><strong>render prop</strong></a>. Therefore, <code>ReasonReact.cloneElement</code> is only used for edge-case interop situations. For example, <code>data-*</code> and <code>aria-*</code> attributes aren&#39;t syntactically valid as a function label. The following doesn&#39;t parse:", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "Signature: let cloneElement: (reactElement, ~props: Js.t({..})=?, &#39;anyChildrenType) =&gt; reactElement", "rendered": "Signature: <code>let cloneElement: (reactElement, ~props: Js.t({..})=?, &#39;anyChildrenType) =&gt; reactElement</code>", "breadcrumb": "clone-element"},
{"href": "./clone-element.html#title--cloneElement", "title": "title: cloneElement", "contents": "", "rendered": "", "breadcrumb": "clone-element"},
{"href": "./clone-element.html", "title": "clone-element", "contents": "", "rendered": "<hr/>", "breadcrumb": "clone-element"},
{"href": "./children.html", "title": "code block", "contents": "ReasonReact.createDomElement(\"div\", ~props={\"className\": bar}, children);", "rendered": "<pre><code>ReasonReact.createDomElement(\"div\", ~props={\"className\": bar}, children);</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "It does work for custom components (upper-case), But it doesn&#39;t for DOM components (lower-cased). This is due to some bindings-related constraints; we&#39;ll make this better in the future! In the meantime, for passing to DOM element, e.g. &lt;div className=bar&gt; ...children &lt;/div&gt; use the following:", "rendered": "It <em>does</em> work for custom components (upper-case), But it doesn&#39;t for DOM components (lower-cased). This is due to some bindings-related constraints; we&#39;ll make this better in the future! In the meantime, for passing to DOM element, e.g. <code>&lt;div className=bar&gt; ...children &lt;/div&gt;</code> use the following:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "let children = [| <div /> |];\n<div> ...children </div>; /* <--- this line */", "rendered": "<pre><code>let children = [| <div /> |];\n<div> ...children </div>; /* <--- this line */</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Following the above section&#39;s reasoning, this code should work:", "rendered": "Following the above section&#39;s reasoning, this code should work:", "breadcrumb": "children"},
{"href": "./children.html#Pitfall", "title": "Pitfall", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "  <Layout> ...(ThreeRows(<div />, child2, child3)) </Layout>\n  ", "rendered": "<pre><code>  <Layout> ...(ThreeRows(<div />, child2, child3)) </Layout>\n  </code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "  <Motion> ...((name) => <div className=name />) </Motion>\n  ", "rendered": "<pre><code>  <Motion> ...((name) => <div className=name />) </Motion>\n  </code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "  <MyForm> ...(<div />, <div />) </MyForm>\n  ", "rendered": "<pre><code>  <MyForm> ...(<div />, <div />) </MyForm>\n  </code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Here are some use-cases for children spread + Reason built-in data structures:", "rendered": "Here are some use-cases for children spread + Reason built-in data structures:", "breadcrumb": "children"},
{"href": "./children.html#Tips--amp--Tricks", "title": "Tips &amp; Tricks", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Just use &lt;MyLayout&gt; ...a &lt;/MyLayout&gt;. This will simply transform into ReasonReact.element(MyLayout.make(a)), aka without the array wrapping.", "rendered": "Just use <code>&lt;MyLayout&gt; ...a &lt;/MyLayout&gt;</code>. This will simply transform into <code>ReasonReact.element(MyLayout.make(a))</code>, aka without the array wrapping.", "breadcrumb": "children"},
{"href": "./children.html#Children-Spread", "title": "Children Spread", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "See how the second MyLayout&#39;s children is also wrapped in an array? We can&#39;t special-case &lt;MyLayout&gt; a &lt;/MyLayout&gt; to pass a without the array wrapping (it&#39;d give even more confusing errors). Since children is usually an array, we&#39;ve decided to always wrap it with an array, no matter how many items we visually see in the JSX. But what if you really want to pass unwrapped data?", "rendered": "See how the second <code>MyLayout</code>&#39;s children is also wrapped in an array? We can&#39;t special-case <code>&lt;MyLayout&gt; a &lt;/MyLayout&gt;</code> to pass <code>a</code> without the array wrapping (it&#39;d give even more confusing errors). Since children is usually an array, we&#39;ve decided to always wrap it with an array, no matter how many items we visually see in the JSX. But what if you really want to pass unwrapped data?", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "ReasonReact.element(\n  MyLayout.make([|a, b|])\n);\nReasonReact.element(\n  MyLayout.make([|a|])\n);", "rendered": "<pre><code>ReasonReact.element(\n  MyLayout.make([|a, b|])\n);\nReasonReact.element(\n  MyLayout.make([|a|])\n);</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "These actually become:", "rendered": "These actually become:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "<MyLayout> a b </MyLayout>\n<MyLayout> a </MyLayout>", "rendered": "<pre><code><MyLayout> a b </MyLayout>\n<MyLayout> a </MyLayout></code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "It means that MyForm is expecting the tuple, but you&#39;re giving array instead! What&#39;s happening? Well, look at what JSX is transformed into:", "rendered": "It means that <code>MyForm</code> is expecting the tuple, but you&#39;re giving <code>array</code> instead! What&#39;s happening? Well, look at what JSX is transformed into:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "This has type:\n  array('a)\nBut somewhere wanted:\n  tuple2Children (defined as (ReasonReact.reactElement, ReasonReact.reactElement))", "rendered": "<pre><code>This has type:\n  array('a)\nBut somewhere wanted:\n  tuple2Children (defined as (ReasonReact.reactElement, ReasonReact.reactElement))</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "This, however, will give you a type error:", "rendered": "This, however, will give you a type error:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "<MyForm> (<div />, <div />) </MyForm>", "rendered": "<pre><code><MyForm> (<div />, <div />) </MyForm></code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Then you can expect the user to pass you a tuple:", "rendered": "Then you can expect the user to pass you a tuple:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "/* MyForm.re */\ntype tuple2Children = (ReasonReact.reactElement, ReasonReact.reactElement);\n\nlet make = (children: tuple2Children) => {\n  ...component,\n  render: _self => {\n    <div>\n      {fst(children)}\n      <Separator />\n      {snd(children)}\n    </div>\n  }\n};", "rendered": "<pre><code>/* MyForm.re */\ntype tuple2Children = (ReasonReact.reactElement, ReasonReact.reactElement);\n\nlet make = (children: tuple2Children) => {\n  ...component,\n  render: _self => {\n    <div>\n      {fst(children)}\n      <Separator />\n      {snd(children)}\n    </div>\n  }\n};</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Technically, if you&#39;ve written a component that accepts a tuple as children:", "rendered": "<em>Technically</em>, if you&#39;ve written a component that accepts a tuple as <code>children</code>:", "breadcrumb": "children"},
{"href": "./children.html#Syntax-Constraint", "title": "Syntax Constraint", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "However, due to syntactical and interoperability reasons, we do have some small restrictions on children:", "rendered": "However, due to syntactical and interoperability reasons, we do have some small restrictions on <code>children</code>:", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "As an author of these JS components, you can only hope that the user provided the right children type to you, and throw an error for them if not. In ReasonReact, children prop is typed and prevents bad usage from the consumer. This seems pretty natural, once you realize that children props is basically like any other prop! Yes, you can pass tuple, variant, record and others to children! This also mean we don&#39;t have to provide the equivalent React.Children.* utils in ReasonReact at all!", "rendered": "As an author of these JS components, you can only hope that the user provided the right children type to you, and throw an error for them if not. In ReasonReact, <code>children</code> prop is typed and prevents bad usage from the consumer. This seems pretty natural, once you realize that <code>children</code> props <strong>is basically like any other prop</strong>! Yes, you can pass tuple, variant, record and others to children! This also mean we don&#39;t have to provide the equivalent <code>React.Children.*</code> utils in ReasonReact at all!", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "\nrender: () => {\n  return React.Children.only(this.props.children('hello'));\n}", "rendered": "<pre><code>\nrender: () => {\n  return React.Children.only(this.props.children('hello'));\n}</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Or maybe you mandate a children callback:", "rendered": "Or maybe you mandate a children callback:", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "// Layout.js\nrender: () => {\n  if (React.Children.count(this.props.children) !== 2) {\n    // ... error\n  }\n  return (\n    <div>\n      {this.props.children[0]}\n      <Separator />\n      {this.props.children[1]}\n    </div>\n  );\n}", "rendered": "<pre><code>// Layout.js\nrender: () => {\n  if (React.Children.count(this.props.children) !== 2) {\n    // ... error\n  }\n  return (\n    <div>\n      {this.props.children[0]}\n      <Separator />\n      {this.props.children[1]}\n    </div>\n  );\n}</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Or, maybe you made a Layout component and accepts exactly two children (e.g. &lt;Layout&gt;&lt;MyColumn /&gt;&lt;MyColumn /&gt;&lt;/Layout&gt;):", "rendered": "Or, maybe you made a Layout component and accepts exactly two children (e.g. <code>&lt;Layout&gt;&lt;MyColumn /&gt;&lt;MyColumn /&gt;&lt;/Layout&gt;</code>):", "breadcrumb": "children"},
{"href": "./children.html", "title": "code block", "contents": "// inside Animation.js\nrender: () => {\n  return React.Children.only(this.children);\n}", "rendered": "<pre><code>// inside Animation.js\nrender: () => {\n  return React.Children.only(this.children);\n}</code></pre>", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "ReactJS provides such helper:", "rendered": "ReactJS provides such helper:", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "Let&#39;s say people are using your component like so: &lt;Animation&gt;&lt;div /&gt;&lt;/Animation&gt;. In the Animation component, you&#39;d want to constrain the children being passed to you (the div here) as a single child. Aka, you&#39;d like to error on this: &lt;Animation&gt;&lt;div /&gt;&lt;div /&gt;&lt;/Animation&gt;.", "rendered": "Let&#39;s say people are using your component like so: <code>&lt;Animation&gt;&lt;div /&gt;&lt;/Animation&gt;</code>. In the <code>Animation</code> component, you&#39;d want to constrain the <code>children</code> being passed to you (the <code>div</code> here) as a single child. Aka, you&#39;d like to error on this: <code>&lt;Animation&gt;&lt;div /&gt;&lt;div /&gt;&lt;/Animation&gt;</code>.", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "ReasonReact children are like ReactJS children, except we provide more bells and whistles that leverages the language itself.", "rendered": "ReasonReact children are like ReactJS children, except we provide more bells and whistles that leverages the language itself.", "breadcrumb": "children"},
{"href": "./children.html#title--Children", "title": "title: Children", "contents": "", "rendered": "", "breadcrumb": "children"},
{"href": "./children.html", "title": "children", "contents": "", "rendered": "<hr/>", "breadcrumb": "children"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "You can&#39;t update state in self.handle; you need to use self.send instead. See the next section.", "rendered": "You can&#39;t update state in <code>self.handle</code>; you need to use <code>self.send</code> instead. See the next section.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Callback-With-State-Update", "title": "Callback With State Update", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Basically, you write a normal callback that:", "rendered": "Basically, you write a normal callback that:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "code block", "contents": "let handleSubmitEscapeHatch = (username, password, event) =>\n  self.handle(\n    (tupleOfThreeItems, self) => doSomething(tupleOfThreeItems, self),\n    (username, password, event),\n  );\n...\n<MyForm onUserClickedSubmit=(handleSubmitEscapeHatch) />", "rendered": "<pre><code>let handleSubmitEscapeHatch = (username, password, event) =>\n  self.handle(\n    (tupleOfThreeItems, self) => doSomething(tupleOfThreeItems, self),\n    (username, password, event),\n  );\n...\n<MyForm onUserClickedSubmit=(handleSubmitEscapeHatch) /></code></pre>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "You cannot write such handleSubmit in ReasonReact, as handle expects to wrap around a function that only takes one argument. Here&#39;s the workaround:", "rendered": "You cannot write such <code>handleSubmit</code> in ReasonReact, as <code>handle</code> expects to wrap around a function that only takes <strong>one</strong> argument. Here&#39;s the workaround:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "code block", "contents": "handleSubmit: function(username, password, event) {\n  this.setState(...)\n}\n...\n<MyForm onUserClickedSubmit={this.handleSubmit} />", "rendered": "<pre><code>handleSubmit: function(username, password, event) {\n  this.setState(...)\n}\n...\n<MyForm onUserClickedSubmit={this.handleSubmit} /></code></pre>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Sometimes, the component you&#39;re calling is from JavaScript (using the ReasonReact&lt;-&gt;ReactJS interop), and its callback prop asks you to pass a callback that receives more than one argument. In ReactJS, it&#39;d look like:", "rendered": "Sometimes, the component you&#39;re calling is from JavaScript (using the <a href=\"interop.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">ReasonReact&lt;-&gt;ReactJS interop</a>), and its callback prop asks you to pass a callback that receives more than one argument. In ReactJS, it&#39;d look like:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Callback-Receiving-Multiple-Arguments", "title": "Callback Receiving Multiple Arguments", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Get it? Through Reason&#39;s natural language-level currying, we usually only ask you to pass the first argument. This returns a new function that takes in the second argument and executes the function body. The second argument being passed by the caller, aka the component you&#39;re rendering!", "rendered": "Get it? Through Reason&#39;s natural language-level currying, we usually only ask you to pass the first argument. This returns a new function that takes in the second argument and executes the function body. The second argument being passed by the caller, aka the component you&#39;re rendering!", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "In reality, self.handle is just a regular function accepting two arguments, the first being the callback in question, and the second one being the payload that&#39;s intended to be passed to the callback.", "rendered": "In reality, <code>self.handle</code> is just a regular function accepting two arguments, the first being the callback in question, and the second one being the payload that&#39;s intended to be passed to the callback.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Explanation", "title": "Explanation", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Note 2: sometimes you might be forwarding handle to some helper functions. Pass the whole self instead and annotate it. This avoids a complex self record type behavior. See Record Field send/handle Not Found.", "rendered": "<strong>Note 2</strong>: sometimes you might be forwarding <code>handle</code> to some helper functions. Pass the whole <code>self</code> instead and <strong>annotate it</strong>. This avoids a complex <code>self</code> record type behavior. See <a href=\"record-field-send-handle-not-found.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Record Field <code>send</code>/<code>handle</code> Not Found</a>.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Note how your click callback now takes the extra argument self. Formally, self.handle expects a callback that", "rendered": "<strong>Note</strong> how your <code>click</code> callback now takes the extra argument <code>self</code>. Formally, <code>self.handle</code> expects a callback that", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "code block", "contents": "let component = ...;\nlet make = (~name, ~onClick, _children) => {\n  let click = (event, self) => {\n    onClick(event);\n    Js.log(self.state);\n  };\n  {\n    ...component,\n    initialState: ...,\n    render: (self) => <button onClick={self.handle(click)} />\n  }\n};", "rendered": "<pre><code>let component = ...;\nlet make = (~name, ~onClick, _children) => {\n  let click = (event, self) => {\n    onClick(event);\n    Js.log(self.state);\n  };\n  {\n    ...component,\n    initialState: ...,\n    render: (self) => <button onClick={self.handle(click)} />\n  }\n};</code></pre>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "To access state, retainedProps and the other items in self from a callback, you need to wrap the callback in an extra layer called self.handle:", "rendered": "To access <code>state</code>, <code>retainedProps</code> and the other items in <code>self</code> from a callback, you <strong>need</strong> to wrap the callback in an extra layer called <code>self.handle</code>:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Reading-Into-self", "title": "Reading Into self", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "code block", "contents": "let component = ...;\n\nlet make = (~name, ~onClick, _children) => {\n  let click = (event) => onClick(name); /* pass the name string up to the owner */\n  {\n    ...component,\n    render: (self) => <button onClick=click />\n  }\n};", "rendered": "<pre><code>let component = ...;\n\nlet make = (~name, ~onClick, _children) => {\n  let click = (event) => onClick(name); /* pass the name string up to the owner */\n  {\n    ...component,\n    render: (self) => <button onClick=click />\n  }\n};</code></pre>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Similarly, to pre-process a value before sending it back to the component&#39;s owner:", "rendered": "Similarly, to pre-process a value before sending it back to the component&#39;s owner:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "No surprise here. Since Reason&#39;s JSX has punning syntax, that button will format into &lt;button onClick /&gt;.", "rendered": "No surprise here. Since Reason&#39;s JSX has <a href=\"https://reasonml.github.io/docs/en/jsx.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">punning syntax</a>, that <code>button</code> will format into <code>&lt;button onClick /&gt;</code>.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "code block", "contents": "let component = ...;\n\nlet make = (~name, ~onClick, _children) => {\n  ...component,\n  render: (self) => <button onClick=onClick />\n};", "rendered": "<pre><code>let component = ...;\n\nlet make = (~name, ~onClick, _children) => {\n  ...component,\n  render: (self) => <button onClick=onClick />\n};</code></pre>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "If you&#39;re just forwarding a callback prop onto your child, you&#39;d do exactly the same thing you&#39;d have done in ReactJS:", "rendered": "If you&#39;re just forwarding a callback prop onto your child, you&#39;d do exactly the same thing you&#39;d have done in ReactJS:", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Reminder: self is ReasonReact&#39;s this. It&#39;s a record that contains things like state, retainedProps and others.", "rendered": "<em>Reminder: <code>self</code> is ReasonReact&#39;s <code>this</code>. It&#39;s a record that contains things like <code>state</code>, <code>retainedProps</code> and others.</em>", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Not-Reading-Into-self", "title": "Not Reading Into self", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "Two scenarios.", "rendered": "Two scenarios.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#Callback-Without-State-Update", "title": "Callback Without State Update", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "This section describes how ReactJS&#39; &lt;div onClick={this.handleClick} /&gt; pattern translates into ReasonReact.", "rendered": "This section describes how ReactJS&#39; <code>&lt;div onClick={this.handleClick} /&gt;</code> pattern translates into ReasonReact.", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html#title--Callback-Handlers", "title": "title: Callback Handlers", "contents": "", "rendered": "", "breadcrumb": "callback-handlers"},
{"href": "./callback-handlers.html", "title": "callback-handlers", "contents": "", "rendered": "<hr/>", "breadcrumb": "callback-handlers"},
{"href": "./index.html", "title": "Home", "contents": "See the README inside src for more info!", "rendered": "See the README inside <code>src</code> for more info!", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Then add some files somewhere (don&#39;t forget to change bsconfig.json, if needed).", "rendered": "Then add some files somewhere (don&#39;t forget to change <code>bsconfig.json</code>, if needed).", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "git clone https://github.com/reasonml/reason-react.git\ncd reason-react\nnpm install\nnpm start", "rendered": "<pre><code>git clone https://github.com/reasonml/reason-react.git\ncd reason-react\nnpm install\nnpm start</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Contribute", "title": "Contribute", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See https://reasonml.github.io/reason-react/", "rendered": "See https://reasonml.github.io/reason-react/", "breadcrumb": "Home"},
{"href": "./index.html#Documentation", "title": "Documentation", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See https://github.com/reasonml-community/reason-react-example", "rendered": "See https://github.com/reasonml-community/reason-react-example", "breadcrumb": "Home"},
{"href": "./index.html#Usage", "title": "Usage", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm install --save reason-react", "rendered": "<pre><code>npm install --save reason-react</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "reason-react", "rendered": "<img src='https://cloud.githubusercontent.com/assets/1909539/25026859/84a5a4e8-205d-11e7-857b-777ce6909cfd.png' alt='reason-react' />", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Come join us in Discord!", "rendered": "Come join us in <a href=\"https://discord.gg/reasonml\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Discord</a>!", "breadcrumb": "Home"},
{"href": "./index.html#ReasonReact", "title": "ReasonReact", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-createClass", "title": "createClass", "contents": "createClass ", "rendered": "<h4 class='item'>let createClass = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-reactNoopUpdateQueue", "title": "reactNoopUpdateQueue", "contents": "reactNoopUpdateQueue ", "rendered": "<h4 class='item'>let reactNoopUpdateQueue = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-factory", "title": "factory", "contents": "factory ", "rendered": "<h4 class='item'>let factory = 'a</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-emptyObject", "title": "emptyObject", "contents": "emptyObject Js t", "rendered": "<h4 class='item'>let emptyObject = Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#value-_assign", "title": "_assign", "contents": "_assign Js t Js t Js t  ", "rendered": "<h4 class='item'>let _assign = (\n    Js.t(&lt; .. &gt;),\n    Js.t(&lt; .. &gt;)\n) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html", "title": "ReasonReactOptimizedCreateClass", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReactOptimizedCreateClass.html#ReasonReactOptimizedCreateClass", "title": "ReasonReactOptimizedCreateClass", "contents": "", "rendered": "", "breadcrumb": "ReasonReactOptimizedCreateClass"},
{"href": "./api/ReasonReact.html", "title": "code block", "contents": "  you'd read a potentially stale url, instead of the fresh one inside watchUrl.\n\n  But this helper is sometimes needed, if you'd like to initialize a page whose display/state depends on the URL,\n  instead of reading from it in watchUrl's callback, which you'd probably have put inside didMount (aka too late,\n  the page's already rendered).\n\n  So, the correct (and idiomatic) usage of this helper is to only use it in a component that's also subscribed to\n  watchUrl. Please see https://github.com/reasonml-community/reason-react-example/blob/master/src/todomvc/TodoItem.re\n  for an example.\n  ", "rendered": "<pre><code>  you'd read a potentially stale url, instead of the fresh one inside watchUrl.\n\n  But this helper is sometimes needed, if you'd like to initialize a page whose display/state depends on the URL,\n  instead of reading from it in watchUrl's callback, which you'd probably have put inside didMount (aka too late,\n  the page's already rendered).\n\n  So, the correct (and idiomatic) usage of this helper is to only use it in a component that's also subscribed to\n  watchUrl. Please see https://github.com/reasonml-community/reason-react-example/blob/master/src/todomvc/TodoItem.re\n  for an example.\n  </code></pre>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": " this is marked as &quot;dangerous&quot; because you technically shouldn&#39;t be accessing the URL outside of watchUrl&#39;s callback;", "rendered": " this is marked as &quot;dangerous&quot; because you technically shouldn&#39;t be accessing the URL outside of watchUrl&#39;s callback;", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.dangerouslyGetInitialUrl", "title": "Router.dangerouslyGetInitialUrl", "contents": "dangerouslyGetInitialUrl unit url ", "rendered": "<h4 class='item'>let dangerouslyGetInitialUrl = (unit) => <a href=\"./api/ReasonReact.html#type-Router.url\">url</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.unwatchUrl", "title": "Router.unwatchUrl", "contents": " stop watching for URL changes ", "rendered": " stop watching for URL changes ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.unwatchUrl", "title": "Router.unwatchUrl", "contents": "unwatchUrl watcherID unit ", "rendered": "<h4 class='item'>let unwatchUrl = (<a href=\"./api/ReasonReact.html#type-Router.watcherID\">watcherID</a>) => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.watchUrl", "title": "Router.watchUrl", "contents": " start watching for URL changes. Returns a subscription token. Upon url change, calls the callback and passes it the url record ", "rendered": " start watching for URL changes. Returns a subscription token. Upon url change, calls the callback and passes it the url record ", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.watchUrl", "title": "Router.watchUrl", "contents": "watchUrl url unit  watcherID ", "rendered": "<h4 class='item'>let watchUrl = ((<a href=\"./api/ReasonReact.html#type-Router.url\">url</a>) => unit) => <a href=\"./api/ReasonReact.html#type-Router.watcherID\">watcherID</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Router.url", "title": "Router.url", "contents": "url path list string hash string search string", "rendered": "<h4 class='item'>type url = {\n    path: list(string),\n    hash: string,\n    search: string\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Router.watcherID", "title": "Router.watcherID", "contents": "watcherID ", "rendered": "<h4 class='item'>type watcherID</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.push", "title": "Router.push", "contents": " update the url with the string path. Example: push(&quot;/book/1&quot;), push(&quot;/books#title&quot;)", "rendered": " update the url with the string path. Example: <code>push(&quot;/book/1&quot;)</code>, <code>push(&quot;/books#title&quot;)</code>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Router.push", "title": "Router.push", "contents": "push string unit ", "rendered": "<h4 class='item'>let push = (string) => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Router", "title": "Router", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-wrapJsForReason", "title": "wrapJsForReason", "contents": "wrapJsForReason reactClass Js t component stateless noRetainedProps actionless reactClass props ", "rendered": "<h4 class='item'>let wrapJsForReason = (\n    ~reactClass: <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a>,\n    ~props: Js.t(&lt; .. &gt;),\n    'a\n) => <a href=\"./api/ReasonReact.html#type-component\">component</a>(<a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>, <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>, <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-createDomElement", "title": "createDomElement", "contents": "createDomElement string Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let createDomElement = (\n    string,\n    ~props: Js.t(&lt; .. &gt;),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-wrapReasonForJs", "title": "wrapReasonForJs", "contents": "wrapReasonForJs componentSpec jsPropsToReason reactClass component ", "rendered": "<h4 class='item'>let wrapReasonForJs = (\n    ~component: <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n        'state,\n        'initialState,\n        'retainedProps,\n        'initialRetainedProps,\n        'action\n    ),\n    <a href=\"./api/ReasonReact.html#type-jsPropsToReason\">jsPropsToReason</a>('a, 'a, 'a, 'a)\n) => <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-jsPropsToReason", "title": "jsPropsToReason", "contents": "jsPropsToReason Js t component ", "rendered": "<h4 class='item'>type jsPropsToReason(\n    'jsProps,\n    'state,\n    'retainedProps,\n    'action\n) = (Js.t('jsProps)) => <a href=\"./api/ReasonReact.html#type-component\">component</a>(\n    'state,\n    'retainedProps,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-element", "title": "element", "contents": "element option string option Js nullable reactRef unit  component reactElement key ref ", "rendered": "<h4 class='item'>let element = (\n    ~?key: option(string),\n    ~?ref: option((Js.nullable(<a href=\"./api/ReasonReact.html#type-reactRef\">reactRef</a>)) => unit),\n    <a href=\"./api/ReasonReact.html#type-component\">component</a>(\n        'state,\n        'retainedProps,\n        'action\n    )\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-reducerComponentWithRetainedProps", "title": "reducerComponentWithRetainedProps", "contents": "reducerComponentWithRetainedProps string componentSpec stateless noRetainedProps ", "rendered": "<h4 class='item'>let reducerComponentWithRetainedProps = (\n    string\n) => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    'retainedProps,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-reducerComponent", "title": "reducerComponent", "contents": "reducerComponent string componentSpec stateless noRetainedProps noRetainedProps ", "rendered": "<h4 class='item'>let reducerComponent = (string) => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-statelessComponentWithRetainedProps", "title": "statelessComponentWithRetainedProps", "contents": "statelessComponentWithRetainedProps string componentSpec stateless stateless noRetainedProps actionless ", "rendered": "<h4 class='item'>let statelessComponentWithRetainedProps = (\n    string\n) => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    'retainedProps,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-statelessComponent", "title": "statelessComponent", "contents": "statelessComponent string componentSpec stateless stateless noRetainedProps noRetainedProps actionless ", "rendered": "<h4 class='item'>let statelessComponent = (string) => <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-stateless\">stateless</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-noRetainedProps\">noRetainedProps</a>,\n    <a href=\"./api/ReasonReact.html#type-actionless\">actionless</a>\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-component", "title": "component", "contents": "component componentSpec", "rendered": "<h4 class='item'>type component(\n    'state,\n    'retainedProps,\n    'action\n) = <a href=\"./api/ReasonReact.html#type-componentSpec\">componentSpec</a>(\n    'state,\n    'state,\n    'retainedProps,\n    'retainedProps,\n    'action\n)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-componentSpec", "title": "componentSpec", "contents": "componentSpec debugName string reactClassInternal reactClassInternal handedOffState Pervasives ref option willReceiveProps self  didMount self update  didUpdate oldNewSelf unit  willUnmount self unit  willUpdate oldNewSelf unit  shouldUpdate oldNewSelf bool  render self reactElement  initialState unit  retainedProps reducer update   subscriptions self list subscription  jsElementWrapped jsElementWrapped", "rendered": "<h4 class='item'>type componentSpec(\n    'state,\n    'initialState,\n    'retainedProps,\n    'initialRetainedProps,\n    'action\n) = {\n    debugName: string,\n    reactClassInternal: <a href=\"./api/ReasonReact.html#type-reactClassInternal\">reactClassInternal</a>,\n    mut handedOffState: Pervasives.ref(option('state)),\n    willReceiveProps: (\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n    ) => 'state,\n    didMount: (\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n    ) => <a href=\"./api/ReasonReact.html#type-update\">update</a>('state, 'retainedProps, 'action),\n    didUpdate: (\n        <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n            'state,\n            'retainedProps,\n            'action\n        )\n    ) => unit,\n    willUnmount: (\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n    ) => unit,\n    willUpdate: (\n        <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n            'state,\n            'retainedProps,\n            'action\n        )\n    ) => unit,\n    shouldUpdate: (\n        <a href=\"./api/ReasonReact.html#type-oldNewSelf\">oldNewSelf</a>(\n            'state,\n            'retainedProps,\n            'action\n        )\n    ) => bool,\n    render: (\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>(\n            'state,\n            'retainedProps,\n            'action\n        )\n    ) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>,\n    initialState: (unit) => 'initialState,\n    retainedProps: 'initialRetainedProps,\n    reducer: ('action, 'state) => <a href=\"./api/ReasonReact.html#type-update\">update</a>(\n        'state,\n        'retainedProps,\n        'action\n    ),\n    subscriptions: (\n        <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n    ) => list(<a href=\"./api/ReasonReact.html#type-subscription\">subscription</a>),\n    jsElementWrapped: <a href=\"./api/ReasonReact.html#type-jsElementWrapped\">jsElementWrapped</a>\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-oldNewSelf", "title": "oldNewSelf", "contents": "oldNewSelf oldSelf self newSelf self", "rendered": "<h4 class='item'>type oldNewSelf('state, 'retainedProps, 'action) = {\n    oldSelf: <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action),\n    newSelf: <a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-jsElementWrapped", "title": "jsElementWrapped", "contents": "jsElementWrapped ", "rendered": "<h4 class='item'>type jsElementWrapped</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactClassInternal", "title": "reactClassInternal", "contents": "reactClassInternal ", "rendered": "<h4 class='item'>type reactClassInternal</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-self", "title": "self", "contents": "self handle reduce state retainedProps send unit  onUnmount unit unit  unit ", "rendered": "<h4 class='item'>type self('state, 'retainedProps, 'action) = {\n    handle: 'payload.\n  ('payload -&gt; ('state, 'retainedProps, 'action) self -&gt; unit) -&gt;\n  'payload Callback.t,\n    reduce: 'payload. ('payload, 'action) reduce,\n    state: 'state,\n    retainedProps: 'retainedProps,\n    send: ('action) => unit,\n    onUnmount: ((unit) => unit) => unit\n}</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-update", "title": "update", "contents": "update self unit  self unit ", "rendered": "<h4 class='item'>type update('state, 'retainedProps, 'action) = \n    | NoUpdate\n    | Update('state)\n    | SideEffects(\n        (<a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)) => unit\n    )\n    | UpdateWithSideEffects(\n        'state,\n        (<a href=\"./api/ReasonReact.html#type-self\">self</a>('state, 'retainedProps, 'action)) => unit\n    )\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reduce", "title": "reduce", "contents": "reduce  Callback t ", "rendered": "<h4 class='item'>type reduce('payload, 'action) = (\n    ('payload) => 'action\n) => <a href=\"./api/ReasonReact.html#module-Callback\">Callback</a>.<a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-subscription", "title": "subscription", "contents": "subscription unit  unit  subscription", "rendered": "<h4 class='item'>type subscription = \n    | Sub((unit) => 'token, ('token) => unit): <a href=\"./api/ReasonReact.html#type-subscription\">subscription</a>\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.chain", "title": "Callback.chain", "contents": "chain t t t  ", "rendered": "<h4 class='item'>let chain = (<a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload), <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)) => <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-Callback.default", "title": "Callback.default", "contents": "default t", "rendered": "<h4 class='item'>let default = <a href=\"./api/ReasonReact.html#type-Callback.t\">t</a>('payload)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-Callback.t", "title": "Callback.t", "contents": "t unit ", "rendered": "<h4 class='item'>type t('payload) = ('payload) => unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#module-Callback", "title": "Callback", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-actionless", "title": "actionless", "contents": "actionless unit", "rendered": "<h4 class='item'>type actionless = unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-noRetainedProps", "title": "noRetainedProps", "contents": "noRetainedProps ", "rendered": "<h4 class='item'>type noRetainedProps</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-stateless", "title": "stateless", "contents": "stateless unit", "rendered": "<h4 class='item'>type stateless = unit</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-renderNotImplemented", "title": "renderNotImplemented", "contents": "renderNotImplemented ", "rendered": "<h4 class='item'>type renderNotImplemented = | RenderNotImplemented\n</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-cloneElement", "title": "cloneElement", "contents": "cloneElement reactElement option Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let cloneElement = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>,\n    ~?props: option(Js.t(&lt; .. &gt;)),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-createElement", "title": "createElement", "contents": "createElement reactClass option Js t array reactElement reactElement  props ", "rendered": "<h4 class='item'>let createElement = (\n    <a href=\"./api/ReasonReact.html#type-reactClass\">reactClass</a>,\n    ~?props: option(Js.t(&lt; .. &gt;)),\n    array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)\n) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-refToJsObj", "title": "refToJsObj", "contents": "refToJsObj reactRef Js t ", "rendered": "<h4 class='item'>let refToJsObj = (<a href=\"./api/ReasonReact.html#type-reactRef\">reactRef</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-arrayToElement", "title": "arrayToElement", "contents": "arrayToElement array reactElement reactElement ", "rendered": "<h4 class='item'>let arrayToElement = (array(<a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a>)) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-stringToElement", "title": "stringToElement", "contents": "stringToElement string reactElement ", "rendered": "<h4 class='item'>let stringToElement = (string) => <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#value-nullElement", "title": "nullElement", "contents": "nullElement reactElement", "rendered": "<h4 class='item'>let nullElement = <a href=\"./api/ReasonReact.html#type-reactElement\">reactElement</a></h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactRef", "title": "reactRef", "contents": "reactRef ", "rendered": "<h4 class='item'>type reactRef</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactElement", "title": "reactElement", "contents": "reactElement ", "rendered": "<h4 class='item'>type reactElement</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#type-reactClass", "title": "reactClass", "contents": "reactClass ", "rendered": "<h4 class='item'>type reactClass</h4>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html", "title": "ReasonReact", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReasonReact"},
{"href": "./api/ReasonReact.html#ReasonReact", "title": "ReasonReact", "contents": "", "rendered": "", "breadcrumb": "ReasonReact"},
{"href": "./api/ReactEventRe.html#value-Transition.elapsedTime", "title": "Transition.elapsedTime", "contents": "elapsedTime t float ", "rendered": "<h4 class='item'>let elapsedTime = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.pseudoElement", "title": "Transition.pseudoElement", "contents": "pseudoElement t string ", "rendered": "<h4 class='item'>let pseudoElement = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.propertyName", "title": "Transition.propertyName", "contents": "propertyName t string ", "rendered": "<h4 class='item'>let propertyName = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.persist", "title": "Transition.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition._type", "title": "Transition._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.timeStamp", "title": "Transition.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.target", "title": "Transition.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isPropagationStopped", "title": "Transition.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.stopPropagation", "title": "Transition.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isDefaultPrevented", "title": "Transition.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.preventDefault", "title": "Transition.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.nativeEvent", "title": "Transition.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.isTrusted", "title": "Transition.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.eventPhase", "title": "Transition.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.defaultPrevented", "title": "Transition.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.currentTarget", "title": "Transition.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.cancelable", "title": "Transition.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Transition.bubbles", "title": "Transition.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Transition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Transition.t", "title": "Transition.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Transition.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Transition.tag", "title": "Transition.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Transition", "title": "Transition", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.elapsedTime", "title": "Animation.elapsedTime", "contents": "elapsedTime t float ", "rendered": "<h4 class='item'>let elapsedTime = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.pseudoElement", "title": "Animation.pseudoElement", "contents": "pseudoElement t string ", "rendered": "<h4 class='item'>let pseudoElement = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.animationName", "title": "Animation.animationName", "contents": "animationName t string ", "rendered": "<h4 class='item'>let animationName = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.persist", "title": "Animation.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation._type", "title": "Animation._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.timeStamp", "title": "Animation.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.target", "title": "Animation.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isPropagationStopped", "title": "Animation.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.stopPropagation", "title": "Animation.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isDefaultPrevented", "title": "Animation.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.preventDefault", "title": "Animation.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.nativeEvent", "title": "Animation.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.isTrusted", "title": "Animation.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.eventPhase", "title": "Animation.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.defaultPrevented", "title": "Animation.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.currentTarget", "title": "Animation.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.cancelable", "title": "Animation.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Animation.bubbles", "title": "Animation.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Animation.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Animation.t", "title": "Animation.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Animation.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Animation.tag", "title": "Animation.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Animation", "title": "Animation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.persist", "title": "Image.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image._type", "title": "Image._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.timeStamp", "title": "Image.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.target", "title": "Image.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isPropagationStopped", "title": "Image.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.stopPropagation", "title": "Image.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isDefaultPrevented", "title": "Image.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.preventDefault", "title": "Image.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.nativeEvent", "title": "Image.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.isTrusted", "title": "Image.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.eventPhase", "title": "Image.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.defaultPrevented", "title": "Image.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.currentTarget", "title": "Image.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.cancelable", "title": "Image.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Image.bubbles", "title": "Image.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Image.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Image.t", "title": "Image.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Image.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Image.tag", "title": "Image.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Image", "title": "Image", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.persist", "title": "Media.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media._type", "title": "Media._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.timeStamp", "title": "Media.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.target", "title": "Media.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isPropagationStopped", "title": "Media.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.stopPropagation", "title": "Media.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isDefaultPrevented", "title": "Media.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.preventDefault", "title": "Media.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.nativeEvent", "title": "Media.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.isTrusted", "title": "Media.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.eventPhase", "title": "Media.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.defaultPrevented", "title": "Media.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.currentTarget", "title": "Media.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.cancelable", "title": "Media.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Media.bubbles", "title": "Media.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Media.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Media.t", "title": "Media.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Media.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Media.tag", "title": "Media.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Media", "title": "Media", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaZ", "title": "Wheel.deltaZ", "contents": "deltaZ t float ", "rendered": "<h4 class='item'>let deltaZ = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaY", "title": "Wheel.deltaY", "contents": "deltaY t float ", "rendered": "<h4 class='item'>let deltaY = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaX", "title": "Wheel.deltaX", "contents": "deltaX t float ", "rendered": "<h4 class='item'>let deltaX = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.deltaMode", "title": "Wheel.deltaMode", "contents": "deltaMode t int ", "rendered": "<h4 class='item'>let deltaMode = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.persist", "title": "Wheel.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel._type", "title": "Wheel._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.timeStamp", "title": "Wheel.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.target", "title": "Wheel.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isPropagationStopped", "title": "Wheel.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.stopPropagation", "title": "Wheel.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isDefaultPrevented", "title": "Wheel.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.preventDefault", "title": "Wheel.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.nativeEvent", "title": "Wheel.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.isTrusted", "title": "Wheel.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.eventPhase", "title": "Wheel.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.defaultPrevented", "title": "Wheel.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.currentTarget", "title": "Wheel.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.cancelable", "title": "Wheel.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Wheel.bubbles", "title": "Wheel.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Wheel.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Wheel.t", "title": "Wheel.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Wheel.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Wheel.tag", "title": "Wheel.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Wheel", "title": "Wheel", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.view", "title": "UI.view", "contents": "view t Dom window ", "rendered": "<h4 class='item'>let view = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => Dom.window</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.detail", "title": "UI.detail", "contents": "detail t int ", "rendered": "<h4 class='item'>let detail = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.persist", "title": "UI.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI._type", "title": "UI._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.timeStamp", "title": "UI.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.target", "title": "UI.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isPropagationStopped", "title": "UI.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.stopPropagation", "title": "UI.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isDefaultPrevented", "title": "UI.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.preventDefault", "title": "UI.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.nativeEvent", "title": "UI.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.isTrusted", "title": "UI.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.eventPhase", "title": "UI.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.defaultPrevented", "title": "UI.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.currentTarget", "title": "UI.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.cancelable", "title": "UI.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-UI.bubbles", "title": "UI.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-UI.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-UI.t", "title": "UI.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-UI.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-UI.tag", "title": "UI.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-UI", "title": "UI", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.touches", "title": "Touch.touches", "contents": "touches t Js t ", "rendered": "<h4 class='item'>let touches = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.targetTouches", "title": "Touch.targetTouches", "contents": "targetTouches t Js t ", "rendered": "<h4 class='item'>let targetTouches = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.shiftKey", "title": "Touch.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.metaKey", "title": "Touch.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.getModifierState", "title": "Touch.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.ctrlKey", "title": "Touch.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.changedTouches", "title": "Touch.changedTouches", "contents": "changedTouches t Js t ", "rendered": "<h4 class='item'>let changedTouches = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.altKey", "title": "Touch.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.persist", "title": "Touch.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch._type", "title": "Touch._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.timeStamp", "title": "Touch.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.target", "title": "Touch.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isPropagationStopped", "title": "Touch.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.stopPropagation", "title": "Touch.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isDefaultPrevented", "title": "Touch.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.preventDefault", "title": "Touch.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.nativeEvent", "title": "Touch.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.isTrusted", "title": "Touch.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.eventPhase", "title": "Touch.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.defaultPrevented", "title": "Touch.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.currentTarget", "title": "Touch.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.cancelable", "title": "Touch.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Touch.bubbles", "title": "Touch.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Touch.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Touch.t", "title": "Touch.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Touch.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Touch.tag", "title": "Touch.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Touch", "title": "Touch", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.persist", "title": "Selection.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection._type", "title": "Selection._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.timeStamp", "title": "Selection.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.target", "title": "Selection.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isPropagationStopped", "title": "Selection.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.stopPropagation", "title": "Selection.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isDefaultPrevented", "title": "Selection.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.preventDefault", "title": "Selection.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.nativeEvent", "title": "Selection.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.isTrusted", "title": "Selection.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.eventPhase", "title": "Selection.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.defaultPrevented", "title": "Selection.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.currentTarget", "title": "Selection.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.cancelable", "title": "Selection.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Selection.bubbles", "title": "Selection.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Selection.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Selection.t", "title": "Selection.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Selection.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Selection.tag", "title": "Selection.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Selection", "title": "Selection", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.shiftKey", "title": "Mouse.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.screenY", "title": "Mouse.screenY", "contents": "screenY t int ", "rendered": "<h4 class='item'>let screenY = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.screenX", "title": "Mouse.screenX", "contents": "screenX t int ", "rendered": "<h4 class='item'>let screenX = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.relatedTarget", "title": "Mouse.relatedTarget", "contents": "relatedTarget t Dom element ", "rendered": "<h4 class='item'>let relatedTarget = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.pageY", "title": "Mouse.pageY", "contents": "pageY t int ", "rendered": "<h4 class='item'>let pageY = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.pageX", "title": "Mouse.pageX", "contents": "pageX t int ", "rendered": "<h4 class='item'>let pageX = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.metaKey", "title": "Mouse.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.getModifierState", "title": "Mouse.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.ctrlKey", "title": "Mouse.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.clientY", "title": "Mouse.clientY", "contents": "clientY t int ", "rendered": "<h4 class='item'>let clientY = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.clientX", "title": "Mouse.clientX", "contents": "clientX t int ", "rendered": "<h4 class='item'>let clientX = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.buttons", "title": "Mouse.buttons", "contents": "buttons t int ", "rendered": "<h4 class='item'>let buttons = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.button", "title": "Mouse.button", "contents": "button t int ", "rendered": "<h4 class='item'>let button = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.altKey", "title": "Mouse.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.persist", "title": "Mouse.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse._type", "title": "Mouse._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.timeStamp", "title": "Mouse.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.target", "title": "Mouse.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isPropagationStopped", "title": "Mouse.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.stopPropagation", "title": "Mouse.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isDefaultPrevented", "title": "Mouse.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.preventDefault", "title": "Mouse.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.nativeEvent", "title": "Mouse.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.isTrusted", "title": "Mouse.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.eventPhase", "title": "Mouse.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.defaultPrevented", "title": "Mouse.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.currentTarget", "title": "Mouse.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.cancelable", "title": "Mouse.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Mouse.bubbles", "title": "Mouse.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Mouse.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Mouse.t", "title": "Mouse.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Mouse.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Mouse.tag", "title": "Mouse.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Mouse", "title": "Mouse", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.persist", "title": "Form.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form._type", "title": "Form._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.timeStamp", "title": "Form.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.target", "title": "Form.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isPropagationStopped", "title": "Form.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.stopPropagation", "title": "Form.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isDefaultPrevented", "title": "Form.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.preventDefault", "title": "Form.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.nativeEvent", "title": "Form.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.isTrusted", "title": "Form.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.eventPhase", "title": "Form.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.defaultPrevented", "title": "Form.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.currentTarget", "title": "Form.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.cancelable", "title": "Form.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Form.bubbles", "title": "Form.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Form.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Form.t", "title": "Form.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Form.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Form.tag", "title": "Form.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Form", "title": "Form", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.relatedTarget", "title": "Focus.relatedTarget", "contents": "relatedTarget t Dom element ", "rendered": "<h4 class='item'>let relatedTarget = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.persist", "title": "Focus.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus._type", "title": "Focus._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.timeStamp", "title": "Focus.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.target", "title": "Focus.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isPropagationStopped", "title": "Focus.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.stopPropagation", "title": "Focus.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isDefaultPrevented", "title": "Focus.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.preventDefault", "title": "Focus.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.nativeEvent", "title": "Focus.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.isTrusted", "title": "Focus.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.eventPhase", "title": "Focus.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.defaultPrevented", "title": "Focus.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.currentTarget", "title": "Focus.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.cancelable", "title": "Focus.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Focus.bubbles", "title": "Focus.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Focus.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Focus.t", "title": "Focus.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Focus.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Focus.tag", "title": "Focus.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Focus", "title": "Focus", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.which", "title": "Keyboard.which", "contents": "which t int ", "rendered": "<h4 class='item'>let which = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.shiftKey", "title": "Keyboard.shiftKey", "contents": "shiftKey t bool ", "rendered": "<h4 class='item'>let shiftKey = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.repeat", "title": "Keyboard.repeat", "contents": "repeat t bool ", "rendered": "<h4 class='item'>let repeat = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.metaKey", "title": "Keyboard.metaKey", "contents": "metaKey t bool ", "rendered": "<h4 class='item'>let metaKey = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.location", "title": "Keyboard.location", "contents": "location t int ", "rendered": "<h4 class='item'>let location = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.locale", "title": "Keyboard.locale", "contents": "locale t string ", "rendered": "<h4 class='item'>let locale = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.keyCode", "title": "Keyboard.keyCode", "contents": "keyCode t int ", "rendered": "<h4 class='item'>let keyCode = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.key", "title": "Keyboard.key", "contents": "key t string ", "rendered": "<h4 class='item'>let key = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.getModifierState", "title": "Keyboard.getModifierState", "contents": "getModifierState string t bool  ", "rendered": "<h4 class='item'>let getModifierState = (string, <a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.ctrlKey", "title": "Keyboard.ctrlKey", "contents": "ctrlKey t bool ", "rendered": "<h4 class='item'>let ctrlKey = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.charCode", "title": "Keyboard.charCode", "contents": "charCode t int ", "rendered": "<h4 class='item'>let charCode = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.altKey", "title": "Keyboard.altKey", "contents": "altKey t bool ", "rendered": "<h4 class='item'>let altKey = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.persist", "title": "Keyboard.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard._type", "title": "Keyboard._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.timeStamp", "title": "Keyboard.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.target", "title": "Keyboard.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isPropagationStopped", "title": "Keyboard.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.stopPropagation", "title": "Keyboard.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isDefaultPrevented", "title": "Keyboard.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.preventDefault", "title": "Keyboard.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.nativeEvent", "title": "Keyboard.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.isTrusted", "title": "Keyboard.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.eventPhase", "title": "Keyboard.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.defaultPrevented", "title": "Keyboard.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.currentTarget", "title": "Keyboard.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.cancelable", "title": "Keyboard.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Keyboard.bubbles", "title": "Keyboard.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Keyboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Keyboard.t", "title": "Keyboard.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Keyboard.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Keyboard.tag", "title": "Keyboard.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Keyboard", "title": "Keyboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.data", "title": "Composition.data", "contents": "data t string ", "rendered": "<h4 class='item'>let data = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.persist", "title": "Composition.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition._type", "title": "Composition._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.timeStamp", "title": "Composition.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.target", "title": "Composition.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isPropagationStopped", "title": "Composition.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.stopPropagation", "title": "Composition.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isDefaultPrevented", "title": "Composition.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.preventDefault", "title": "Composition.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.nativeEvent", "title": "Composition.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.isTrusted", "title": "Composition.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.eventPhase", "title": "Composition.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.defaultPrevented", "title": "Composition.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.currentTarget", "title": "Composition.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.cancelable", "title": "Composition.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Composition.bubbles", "title": "Composition.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Composition.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Composition.t", "title": "Composition.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Composition.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Composition.tag", "title": "Composition.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Composition", "title": "Composition", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.clipboardData", "title": "Clipboard.clipboardData", "contents": "clipboardData t Js t ", "rendered": "<h4 class='item'>let clipboardData = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.persist", "title": "Clipboard.persist", "contents": "persist t unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard._type", "title": "Clipboard._type", "contents": "_type t string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.timeStamp", "title": "Clipboard.timeStamp", "contents": "timeStamp t float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.target", "title": "Clipboard.target", "contents": "target t Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isPropagationStopped", "title": "Clipboard.isPropagationStopped", "contents": "isPropagationStopped t bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.stopPropagation", "title": "Clipboard.stopPropagation", "contents": "stopPropagation t unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isDefaultPrevented", "title": "Clipboard.isDefaultPrevented", "contents": "isDefaultPrevented t bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.preventDefault", "title": "Clipboard.preventDefault", "contents": "preventDefault t unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.nativeEvent", "title": "Clipboard.nativeEvent", "contents": "nativeEvent t Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.isTrusted", "title": "Clipboard.isTrusted", "contents": "isTrusted t bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.eventPhase", "title": "Clipboard.eventPhase", "contents": "eventPhase t int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.defaultPrevented", "title": "Clipboard.defaultPrevented", "contents": "defaultPrevented t bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.currentTarget", "title": "Clipboard.currentTarget", "contents": "currentTarget t Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.cancelable", "title": "Clipboard.cancelable", "contents": "cancelable t bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Clipboard.bubbles", "title": "Clipboard.bubbles", "contents": "bubbles t bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-Clipboard.t\">t</a>) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Clipboard.t", "title": "Clipboard.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Clipboard.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Clipboard.tag", "title": "Clipboard.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Clipboard", "title": "Clipboard", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-toSyntheticEvent", "title": "toSyntheticEvent", "contents": "toSyntheticEvent synthetic Synthetic t ", "rendered": "<h4 class='item'>let toSyntheticEvent = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => <a href=\"./api/ReactEventRe.html#module-Synthetic\">Synthetic</a>.<a href=\"./api/ReactEventRe.html#type-Synthetic.t\">t</a></h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.persist", "title": "Synthetic.persist", "contents": "persist synthetic unit ", "rendered": "<h4 class='item'>let persist = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic._type", "title": "Synthetic._type", "contents": "_type synthetic string ", "rendered": "<h4 class='item'>let _type = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => string</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.timeStamp", "title": "Synthetic.timeStamp", "contents": "timeStamp synthetic float ", "rendered": "<h4 class='item'>let timeStamp = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => float</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.target", "title": "Synthetic.target", "contents": "target synthetic Dom element ", "rendered": "<h4 class='item'>let target = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isPropagationStopped", "title": "Synthetic.isPropagationStopped", "contents": "isPropagationStopped synthetic bool ", "rendered": "<h4 class='item'>let isPropagationStopped = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.stopPropagation", "title": "Synthetic.stopPropagation", "contents": "stopPropagation synthetic unit ", "rendered": "<h4 class='item'>let stopPropagation = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isDefaultPrevented", "title": "Synthetic.isDefaultPrevented", "contents": "isDefaultPrevented synthetic bool ", "rendered": "<h4 class='item'>let isDefaultPrevented = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.preventDefault", "title": "Synthetic.preventDefault", "contents": "preventDefault synthetic unit ", "rendered": "<h4 class='item'>let preventDefault = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => unit</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.nativeEvent", "title": "Synthetic.nativeEvent", "contents": "nativeEvent synthetic Js t ", "rendered": "<h4 class='item'>let nativeEvent = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => Js.t(&lt; .. &gt;)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.isTrusted", "title": "Synthetic.isTrusted", "contents": "isTrusted synthetic bool ", "rendered": "<h4 class='item'>let isTrusted = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.eventPhase", "title": "Synthetic.eventPhase", "contents": "eventPhase synthetic int ", "rendered": "<h4 class='item'>let eventPhase = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => int</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.defaultPrevented", "title": "Synthetic.defaultPrevented", "contents": "defaultPrevented synthetic bool ", "rendered": "<h4 class='item'>let defaultPrevented = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.currentTarget", "title": "Synthetic.currentTarget", "contents": "currentTarget synthetic Dom element ", "rendered": "<h4 class='item'>let currentTarget = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => Dom.element</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.cancelable", "title": "Synthetic.cancelable", "contents": "cancelable synthetic bool ", "rendered": "<h4 class='item'>let cancelable = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#value-Synthetic.bubbles", "title": "Synthetic.bubbles", "contents": "bubbles synthetic bool ", "rendered": "<h4 class='item'>let bubbles = (<a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>('a)) => bool</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Synthetic.t", "title": "Synthetic.t", "contents": "t synthetic tag", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactEventRe.html#type-synthetic\">synthetic</a>(<a href=\"./api/ReactEventRe.html#type-Synthetic.tag\">tag</a>)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-Synthetic.tag", "title": "Synthetic.tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#module-Synthetic", "title": "Synthetic", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#type-synthetic", "title": "synthetic", "contents": "synthetic ", "rendered": "<h4 class='item'>type synthetic('a)</h4>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html", "title": "ReactEventRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactEventRe.html#ReactEventRe", "title": "ReactEventRe", "contents": "", "rendered": "", "breadcrumb": "ReactEventRe"},
{"href": "./api/ReactDOMServerRe.html", "title": "ReactDOMServerRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMServerRe"},
{"href": "./api/ReactDOMServerRe.html#ReactDOMServerRe", "title": "ReactDOMServerRe", "contents": "", "rendered": "", "breadcrumb": "ReactDOMServerRe"},
{"href": "./api/ReactDOMRe.html#value-Style.unsafeAddProp", "title": "Style.unsafeAddProp", "contents": "unsafeAddProp style string string style   ", "rendered": "<h4 class='item'>let unsafeAddProp = (<a href=\"./api/ReactDOMRe.html#type-style\">style</a>, string, string) => <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-Style.combine", "title": "Style.combine", "contents": "combine style style style  ", "rendered": "<h4 class='item'>let combine = (<a href=\"./api/ReactDOMRe.html#type-style\">style</a>, <a href=\"./api/ReactDOMRe.html#type-style\">style</a>) => <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-Style.t", "title": "Style.t", "contents": "t style", "rendered": "<h4 class='item'>type t = <a href=\"./api/ReactDOMRe.html#type-style\">style</a></h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#module-Style", "title": "Style", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-style", "title": "style", "contents": "style ", "rendered": "<h4 class='item'>type style</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#type-reactDOMProps", "title": "reactDOMProps", "contents": "reactDOMProps ", "rendered": "<h4 class='item'>type reactDOMProps</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-hydrateToElementWithId", "title": "hydrateToElementWithId", "contents": "hydrateToElementWithId reactElement string unit  ", "rendered": "<h4 class='item'>let hydrateToElementWithId = (<a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>, string) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-hydrateToElementWithClassName", "title": "hydrateToElementWithClassName", "contents": "hydrateToElementWithClassName reactElement string unit  ", "rendered": "<h4 class='item'>let hydrateToElementWithClassName = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>,\n    string\n) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-renderToElementWithId", "title": "renderToElementWithId", "contents": "renderToElementWithId reactElement string unit  ", "rendered": "<h4 class='item'>let renderToElementWithId = (<a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>, string) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#value-renderToElementWithClassName", "title": "renderToElementWithClassName", "contents": "renderToElementWithClassName reactElement string unit  ", "rendered": "<h4 class='item'>let renderToElementWithClassName = (\n    <a href=\"./api/ReasonReact.html#type-reactElement\" title=\"ReasonReact.reactElement\">reactElement</a>,\n    string\n) => unit</h4>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html", "title": "ReactDOMRe", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ReactDOMRe"},
{"href": "./api/ReactDOMRe.html#ReactDOMRe", "title": "ReactDOMRe", "contents": "", "rendered": "", "breadcrumb": "ReactDOMRe"}]